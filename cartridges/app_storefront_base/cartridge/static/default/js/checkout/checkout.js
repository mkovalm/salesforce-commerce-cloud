/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * Populate the Billing Address Summary View\r\n * @param {string} parentSelector - the top level DOM selector for a unique address summary\r\n * @param {Object} address - the address data\r\n */\r\nfunction populateAddressSummary(parentSelector, address) {\r\n    $.each(address, function (attr) {\r\n        var val = address[attr];\r\n        $('.' + attr, parentSelector).text(val || '');\r\n    });\r\n}\r\n\r\n/**\r\n * returns a formed <option /> element\r\n * @param {Object} shipping - the shipping object (shipment model)\r\n * @param {boolean} selected - current shipping is selected (for PLI)\r\n * @param {order} order - the Order model\r\n * @param {Object} [options] - options\r\n * @returns {Object} - the jQuery / DOMElement\r\n */\r\nfunction optionValueForAddress(shipping, selected, order, options) {\r\n    var safeOptions = options || {};\r\n    var isBilling = safeOptions.type && safeOptions.type === 'billing';\r\n    var className = safeOptions.className || '';\r\n    var isSelected = selected;\r\n    var isNew = !shipping;\r\n    if (typeof shipping === 'string') {\r\n        return $('<option class=\"' + className + '\" disabled>' + shipping + '</option>');\r\n    }\r\n    var safeShipping = shipping || {};\r\n    var shippingAddress = safeShipping.shippingAddress || {};\r\n\r\n    if (isBilling && isNew && !order.billing.matchingAddressId) {\r\n        shippingAddress = order.billing.billingAddress.address || {};\r\n        isNew = false;\r\n        isSelected = true;\r\n        safeShipping.UUID = 'manual-entry';\r\n    }\r\n\r\n    var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';\r\n    var optionEl = $('<option class=\"' + className + '\" />');\r\n    optionEl.val(uuid);\r\n\r\n    var title;\r\n\r\n    if (isNew) {\r\n        title = order.resources.addNewAddress;\r\n    } else {\r\n        title = [];\r\n        if (shippingAddress.firstName) {\r\n            title.push(shippingAddress.firstName);\r\n        }\r\n        if (shippingAddress.lastName) {\r\n            title.push(shippingAddress.lastName);\r\n        }\r\n        if (shippingAddress.address1) {\r\n            title.push(shippingAddress.address1);\r\n        }\r\n        if (shippingAddress.address2) {\r\n            title.push(shippingAddress.address2);\r\n        }\r\n        if (shippingAddress.city) {\r\n            if (shippingAddress.state) {\r\n                title.push(shippingAddress.city + ',');\r\n            } else {\r\n                title.push(shippingAddress.city);\r\n            }\r\n        }\r\n        if (shippingAddress.stateCode) {\r\n            title.push(shippingAddress.stateCode);\r\n        }\r\n        if (shippingAddress.postalCode) {\r\n            title.push(shippingAddress.postalCode);\r\n        }\r\n        if (!isBilling && safeShipping.selectedShippingMethod) {\r\n            title.push('-');\r\n            title.push(safeShipping.selectedShippingMethod.displayName);\r\n        }\r\n\r\n        if (title.length > 2) {\r\n            title = title.join(' ');\r\n        } else {\r\n            title = order.resources.newAddress;\r\n        }\r\n    }\r\n    optionEl.text(title);\r\n\r\n    var keyMap = {\r\n        'data-first-name': 'firstName',\r\n        'data-last-name': 'lastName',\r\n        'data-address1': 'address1',\r\n        'data-address2': 'address2',\r\n        'data-city': 'city',\r\n        'data-state-code': 'stateCode',\r\n        'data-postal-code': 'postalCode',\r\n        'data-country-code': 'countryCode',\r\n        'data-phone': 'phone'\r\n    };\r\n    $.each(keyMap, function (key) {\r\n        var mappedKey = keyMap[key];\r\n        var mappedValue = shippingAddress[mappedKey];\r\n        // In case of country code\r\n        if (mappedValue && typeof mappedValue === 'object') {\r\n            mappedValue = mappedValue.value;\r\n        }\r\n\r\n        optionEl.attr(key, mappedValue || '');\r\n    });\r\n\r\n    var giftObj = {\r\n        'data-is-gift': 'isGift',\r\n        'data-gift-message': 'giftMessage'\r\n    };\r\n\r\n    $.each(giftObj, function (key) {\r\n        var mappedKey = giftObj[key];\r\n        var mappedValue = safeShipping[mappedKey];\r\n        optionEl.attr(key, mappedValue || '');\r\n    });\r\n\r\n    if (isSelected) {\r\n        optionEl.attr('selected', true);\r\n    }\r\n\r\n    return optionEl;\r\n}\r\n\r\n/**\r\n * returns address properties from a UI form\r\n * @param {Form} form - the Form element\r\n * @returns {Object} - a JSON object with all values\r\n */\r\nfunction getAddressFieldsFromUI(form) {\r\n    var address = {\r\n        firstName: $('input[name$=_firstName]', form).val(),\r\n        lastName: $('input[name$=_lastName]', form).val(),\r\n        address1: $('input[name$=_address1]', form).val(),\r\n        address2: $('input[name$=_address2]', form).val(),\r\n        city: $('input[name$=_city]', form).val(),\r\n        postalCode: $('input[name$=_postalCode]', form).val(),\r\n        stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),\r\n        countryCode: $('select[name$=_country]', form).val(),\r\n        phone: $('input[name$=_phone]', form).val()\r\n    };\r\n    return address;\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        populateAddressSummary: populateAddressSummary,\r\n        optionValueForAddress: optionValueForAddress,\r\n        getAddressFieldsFromUI: getAddressFieldsFromUI\r\n    },\r\n\r\n    showDetails: function () {\r\n        $('.btn-show-details').on('click', function () {\r\n            var form = $(this).closest('form');\r\n\r\n            form.attr('data-address-mode', 'details');\r\n            form.find('.multi-ship-address-actions').removeClass('d-none');\r\n            form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');\r\n        });\r\n    },\r\n\r\n    addNewAddress: function () {\r\n        $('.btn-add-new').on('click', function () {\r\n            var $el = $(this);\r\n            if ($el.parents('#dwfrm_billing').length > 0) {\r\n                // Handle billing address case\r\n                $('body').trigger('checkout:clearBillingForm');\r\n                var $option = $($el.parents('form').find('.addressSelector option')[0]);\r\n                $option.attr('value', 'new');\r\n                $option.text('New Address');\r\n                $option.prop('selected', 'selected');\r\n                $el.parents('[data-address-mode]').attr('data-address-mode', 'new');\r\n            } else {\r\n                // Handle shipping address case\r\n                var $newEl = $el.parents('form').find('.addressSelector option[value=new]');\r\n                $newEl.prop('selected', 'selected');\r\n                $newEl.parent().trigger('change');\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\r\nvar cleave = __webpack_require__(/*! ../components/cleave */ \"./cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js\");\r\n\r\n/**\r\n * updates the billing address selector within billing forms\r\n * @param {Object} order - the order model\r\n * @param {Object} customer - the customer model\r\n */\r\nfunction updateBillingAddressSelector(order, customer) {\r\n    var shippings = order.shipping;\r\n\r\n    var form = $('form[name$=billing]')[0];\r\n    var $billingAddressSelector = $('.addressSelector', form);\r\n    var hasSelectedAddress = false;\r\n\r\n    if ($billingAddressSelector && $billingAddressSelector.length === 1) {\r\n        $billingAddressSelector.empty();\r\n        // Add New Address option\r\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            null,\r\n            false,\r\n            order,\r\n            { type: 'billing' }));\r\n\r\n        // Separator -\r\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            order.resources.shippingAddresses, false, order, {\r\n                // className: 'multi-shipping',\r\n                type: 'billing'\r\n            }\r\n        ));\r\n\r\n        shippings.forEach(function (aShipping) {\r\n            var isSelected = order.billing.matchingAddressId === aShipping.UUID;\r\n            hasSelectedAddress = hasSelectedAddress || isSelected;\r\n            // Shipping Address option\r\n            $billingAddressSelector.append(\r\n                addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order,\r\n                    {\r\n                        // className: 'multi-shipping',\r\n                        type: 'billing'\r\n                    }\r\n                )\r\n            );\r\n        });\r\n\r\n        if (customer.addresses && customer.addresses.length > 0) {\r\n            $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n                order.resources.accountAddresses, false, order));\r\n            customer.addresses.forEach(function (address) {\r\n                var isSelected = order.billing.matchingAddressId === address.ID;\r\n                hasSelectedAddress = hasSelectedAddress || isSelected;\r\n                // Customer Address option\r\n                $billingAddressSelector.append(\r\n                    addressHelpers.methods.optionValueForAddress({\r\n                        UUID: 'ab_' + address.ID,\r\n                        shippingAddress: address\r\n                    }, isSelected, order, { type: 'billing' })\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    if (hasSelectedAddress\r\n        || (!order.billing.matchingAddressId && order.billing.billingAddress.address)) {\r\n        // show\r\n        $(form).attr('data-address-mode', 'edit');\r\n    } else {\r\n        $(form).attr('data-address-mode', 'new');\r\n    }\r\n\r\n    $billingAddressSelector.show();\r\n}\r\n\r\n/**\r\n * updates the billing address form values within payment forms\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateBillingAddressFormValues(order) {\r\n    var billing = order.billing;\r\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\r\n\r\n    var form = $('form[name=dwfrm_billing]');\r\n    if (!form) return;\r\n\r\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\r\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\r\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\r\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\r\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\r\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\r\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\r\n        .val(billing.billingAddress.address.stateCode);\r\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\r\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\r\n    $('input[name$=_email]', form).val(order.orderEmail);\r\n\r\n    if (billing.payment && billing.payment.selectedPaymentInstruments\r\n        && billing.payment.selectedPaymentInstruments.length > 0) {\r\n        var instrument = billing.payment.selectedPaymentInstruments[0];\r\n        $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\r\n        $('select[name$=expirationYear]', form).val(instrument.expirationYear);\r\n        // Force security code and card number clear\r\n        $('input[name$=securityCode]', form).val('');\r\n        $('input[name$=cardNumber]').data('cleave').setRawValue('');\r\n    }\r\n}\r\n\r\n/**\r\n * clears the billing address form values\r\n */\r\nfunction clearBillingAddressFormValues() {\r\n    updateBillingAddressFormValues({\r\n        billing: {\r\n            billingAddress: {\r\n                address: {\r\n                    countryCode: {}\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the billing information in checkout, based on the supplied order model\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n * @param {Object} customer - customer model to use as basis of new truth\r\n * @param {Object} [options] - options\r\n */\r\nfunction updateBillingInformation(order, customer) {\r\n    updateBillingAddressSelector(order, customer);\r\n\r\n    // update billing address form\r\n    updateBillingAddressFormValues(order);\r\n\r\n    // update billing address summary\r\n    addressHelpers.methods.populateAddressSummary('.billing .address-summary',\r\n        order.billing.billingAddress.address);\r\n\r\n    // update billing parts of order summary\r\n    $('.order-summary-email').text(order.orderEmail);\r\n\r\n    if (order.billing.billingAddress.address) {\r\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the payment information in checkout, based on the supplied order model\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n */\r\nfunction updatePaymentInformation(order) {\r\n    // update payment details\r\n    var $paymentSummary = $('.payment-details');\r\n    var htmlToAppend = '';\r\n\r\n    if (order.billing.payment && order.billing.payment.selectedPaymentInstruments\r\n        && order.billing.payment.selectedPaymentInstruments.length > 0) {\r\n        htmlToAppend += '<span>' + order.resources.cardType + ' '\r\n            + order.billing.payment.selectedPaymentInstruments[0].type\r\n            + '</span><div>'\r\n            + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber\r\n            + '</div><div><span>'\r\n            + order.resources.cardEnding + ' '\r\n            + order.billing.payment.selectedPaymentInstruments[0].expirationMonth\r\n            + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear\r\n            + '</span></div>';\r\n    }\r\n\r\n    $paymentSummary.empty().append(htmlToAppend);\r\n}\r\n\r\n/**\r\n * clears the credit card form\r\n */\r\nfunction clearCreditCardForm() {\r\n    $('input[name$=\"_cardNumber\"]').data('cleave').setRawValue('');\r\n    $('select[name$=\"_expirationMonth\"]').val('');\r\n    $('select[name$=\"_expirationYear\"]').val('');\r\n    $('input[name$=\"_securityCode\"]').val('');\r\n    $('input[name$=\"_email\"]').val('');\r\n    $('input[name$=\"_phone\"]').val('');\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        updateBillingAddressSelector: updateBillingAddressSelector,\r\n        updateBillingAddressFormValues: updateBillingAddressFormValues,\r\n        clearBillingAddressFormValues: clearBillingAddressFormValues,\r\n        updateBillingInformation: updateBillingInformation,\r\n        updatePaymentInformation: updatePaymentInformation,\r\n        clearCreditCardForm: clearCreditCardForm\r\n    },\r\n\r\n    showBillingDetails: function () {\r\n        $('.btn-show-billing-details').on('click', function () {\r\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');\r\n        });\r\n    },\r\n\r\n    hideBillingDetails: function () {\r\n        $('.btn-hide-billing-details').on('click', function () {\r\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');\r\n        });\r\n    },\r\n\r\n    selectBillingAddress: function () {\r\n        $('.payment-form .addressSelector').on('change', function () {\r\n            var form = $(this).parents('form')[0];\r\n            var selectedOption = $('option:selected', this);\r\n            var optionID = selectedOption[0].value;\r\n\r\n            if (optionID === 'new') {\r\n                // Show Address\r\n                $(form).attr('data-address-mode', 'new');\r\n            } else {\r\n                // Hide Address\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            }\r\n\r\n            // Copy fields\r\n            var attrs = selectedOption.data();\r\n            var element;\r\n\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                element = attr === 'countryCode' ? 'country' : attr;\r\n                if (element === 'cardNumber') {\r\n                    $('.cardNumber').data('cleave').setRawValue(attrs[attr]);\r\n                } else {\r\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    handleCreditCardNumber: function () {\r\n        cleave.handleCreditCardNumber('.cardNumber', '#cardType');\r\n    },\r\n\r\n    santitizeForm: function () {\r\n        $('body').on('checkout:serializeBilling', function (e, data) {\r\n            var serializedForm = cleave.serializeData(data.form);\r\n\r\n            data.callback(serializedForm);\r\n        });\r\n    },\r\n\r\n    selectSavedPaymentInstrument: function () {\r\n        $(document).on('click', '.saved-payment-instrument', function (e) {\r\n            e.preventDefault();\r\n            $('.saved-payment-security-code').val('');\r\n            $('.saved-payment-instrument').removeClass('selected-payment');\r\n            $(this).addClass('selected-payment');\r\n            $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');\r\n            $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');\r\n            $('.saved-payment-instrument.selected-payment' +\r\n                ' .card-image').addClass('checkout-hidden');\r\n            $('.saved-payment-instrument.selected-payment ' +\r\n                '.security-code-input').removeClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    addNewPaymentInstrument: function () {\r\n        $('.btn.add-payment').on('click', function (e) {\r\n            e.preventDefault();\r\n            $('.payment-information').data('is-new-payment', true);\r\n            clearCreditCardForm();\r\n            $('.credit-card-form').removeClass('checkout-hidden');\r\n            $('.user-payment-instruments').addClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    cancelNewPayment: function () {\r\n        $('.cancel-new-payment').on('click', function (e) {\r\n            e.preventDefault();\r\n            $('.payment-information').data('is-new-payment', false);\r\n            clearCreditCardForm();\r\n            $('.user-payment-instruments').removeClass('checkout-hidden');\r\n            $('.credit-card-form').addClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    clearBillingForm: function () {\r\n        $('body').on('checkout:clearBillingForm', function () {\r\n            clearBillingAddressFormValues();\r\n        });\r\n    },\r\n\r\n    paymentTabs: function () {\r\n        $('.payment-options .nav-item').on('click', function (e) {\r\n            e.preventDefault();\r\n            var methodID = $(this).data('method-id');\r\n            $('.payment-information').data('payment-method-id', methodID);\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\r\nvar shippingHelpers = __webpack_require__(/*! ./shipping */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js\");\r\nvar billingHelpers = __webpack_require__(/*! ./billing */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js\");\r\nvar summaryHelpers = __webpack_require__(/*! ./summary */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js\");\r\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\r\n\r\n\r\n/**\r\n * Create the jQuery Checkout Plugin.\r\n *\r\n * This jQuery plugin will be registered on the dom element in checkout.isml with the\r\n * id of \"checkout-main\".\r\n *\r\n * The checkout plugin will handle the different state the user interface is in as the user\r\n * progresses through the varying forms such as shipping and payment.\r\n *\r\n * Billing info and payment info are used a bit synonymously in this code.\r\n *\r\n */\r\n(function ($) {\r\n    $.fn.checkout = function () { // eslint-disable-line\r\n        var plugin = this;\r\n\r\n        //\r\n        // Collect form data from user input\r\n        //\r\n        var formData = {\r\n            // Shipping Address\r\n            shipping: {},\r\n\r\n            // Billing Address\r\n            billing: {},\r\n\r\n            // Payment\r\n            payment: {},\r\n\r\n            // Gift Codes\r\n            giftCode: {}\r\n        };\r\n\r\n        //\r\n        // The different states/stages of checkout\r\n        //\r\n        var checkoutStages = [\r\n            'shipping',\r\n            'payment',\r\n            'placeOrder',\r\n            'submitted'\r\n        ];\r\n\r\n        /**\r\n         * Updates the URL to determine stage\r\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\r\n         */\r\n        function updateUrl(currentStage) {\r\n            history.pushState(\r\n                checkoutStages[currentStage],\r\n                document.title,\r\n                location.pathname\r\n                + '?stage='\r\n                + checkoutStages[currentStage]\r\n                + '#'\r\n                + checkoutStages[currentStage]\r\n            );\r\n        }\r\n\r\n        //\r\n        // Local member methods of the Checkout plugin\r\n        //\r\n        var members = {\r\n\r\n            // initialize the currentStage variable for the first time\r\n            currentStage: 0,\r\n\r\n            /**\r\n             * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)\r\n             * @returns {Object} a promise\r\n             */\r\n            updateStage: function () {\r\n                var stage = checkoutStages[members.currentStage];\r\n                var defer = $.Deferred(); // eslint-disable-line\r\n\r\n                if (stage === 'shipping') {\r\n                    //\r\n                    // Clear Previous Errors\r\n                    //\r\n                    formHelpers.clearPreviousErrors('.shipping-form');\r\n\r\n                    //\r\n                    // Submit the Shipping Address Form\r\n                    //\r\n                    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\r\n                    var formSelector = isMultiShip ?\r\n                            '.multi-shipping .active form' : '.single-shipping .shipping-form';\r\n                    var form = $(formSelector);\r\n\r\n                    if (isMultiShip && form.length === 0) {\r\n                        // in case the multi ship form is already submitted\r\n                        var url = $('#checkout-main').attr('data-checkout-get-url');\r\n                        $.ajax({\r\n                            url: url,\r\n                            method: 'GET',\r\n                            success: function (data) {\r\n                                if (!data.error) {\r\n                                    $('body').trigger('checkout:updateCheckoutView',\r\n                                        { order: data.order, customer: data.customer });\r\n                                    defer.resolve();\r\n                                } else if ($('.shipping-error .alert-danger').length < 1) {\r\n                                    var errorMsg = data.message;\r\n                                    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n                                        'fade show\" role=\"alert\">' +\r\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n                                        '<span aria-hidden=\"true\">&times;</span>' +\r\n                                        '</button>' + errorMsg + '</div>';\r\n                                    $('.shipping-error').append(errorHtml);\r\n                                    defer.reject();\r\n                                }\r\n                            },\r\n                            error: function () {\r\n                                // Server error submitting form\r\n                                defer.reject();\r\n                            }\r\n                        });\r\n                    } else {\r\n                        var shippingFormData = form.serialize();\r\n\r\n                        $('body').trigger('checkout:serializeShipping', {\r\n                            form: form,\r\n                            data: shippingFormData,\r\n                            callback: function (data) {\r\n                                shippingFormData = data;\r\n                            }\r\n                        });\r\n\r\n                        $.ajax({\r\n                            url: form.attr('action'),\r\n                            type: 'post',\r\n                            data: shippingFormData,\r\n                            success: function (data) {\r\n                                shippingHelpers.methods.shippingFormResponse(defer, data);\r\n                            },\r\n                            error: function (err) {\r\n                                if (err.responseJSON.redirectUrl) {\r\n                                    window.location.href = err.responseJSON.redirectUrl;\r\n                                }\r\n                                // Server error submitting form\r\n                                defer.reject(err.responseJSON);\r\n                            }\r\n                        });\r\n                    }\r\n                    return defer;\r\n                } else if (stage === 'payment') {\r\n                    //\r\n                    // Submit the Billing Address Form\r\n                    //\r\n\r\n                    formHelpers.clearPreviousErrors('.payment-form');\r\n\r\n                    var paymentForm = $('#dwfrm_billing').serialize();\r\n\r\n                    $('body').trigger('checkout:serializeBilling', {\r\n                        form: $('#dwfrm_billing'),\r\n                        data: paymentForm,\r\n                        callback: function (data) { paymentForm = data; }\r\n                    });\r\n\r\n                    if ($('.data-checkout-stage').data('customer-type') === 'registered') {\r\n                        // if payment method is credit card\r\n                        if ($('.payment-information').data('payment-method-id') === 'CREDIT_CARD') {\r\n                            if (!($('.payment-information').data('is-new-payment'))) {\r\n                                var cvvCode = $('.saved-payment-instrument.' +\r\n                                    'selected-payment .saved-payment-security-code').val();\r\n\r\n                                if (cvvCode === '') {\r\n                                    $('.saved-payment-instrument.' +\r\n                                        'selected-payment ' +\r\n                                        '.form-control').addClass('is-invalid');\r\n                                    defer.reject();\r\n                                    return defer;\r\n                                }\r\n\r\n                                var $savedPaymentInstrument = $('.saved-payment-instrument' +\r\n                                    '.selected-payment'\r\n                                );\r\n\r\n                                paymentForm += '&storedPaymentUUID=' +\r\n                                    $savedPaymentInstrument.data('uuid');\r\n\r\n                                paymentForm += '&securityCode=' + cvvCode;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    $.ajax({\r\n                        url: $('#dwfrm_billing').attr('action'),\r\n                        method: 'POST',\r\n                        data: paymentForm,\r\n                        success: function (data) {\r\n                            // look for field validation errors\r\n                            if (data.error) {\r\n                                if (data.fieldErrors.length) {\r\n                                    data.fieldErrors.forEach(function (error) {\r\n                                        if (Object.keys(error).length) {\r\n                                            formHelpers.loadFormErrors('.payment-form', error);\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                if (data.serverErrors.length) {\r\n                                    data.serverErrors.forEach(function (error) {\r\n                                        $('.error-message').show();\r\n                                        $('.error-message-text').text(error);\r\n                                    });\r\n                                }\r\n\r\n                                if (data.cartError) {\r\n                                    window.location.href = data.redirectUrl;\r\n                                }\r\n\r\n                                defer.reject();\r\n                            } else {\r\n                                //\r\n                                // Populate the Address Summary\r\n                                //\r\n                                $('body').trigger('checkout:updateCheckoutView',\r\n                                    { order: data.order, customer: data.customer });\r\n\r\n                                if (data.renderedPaymentInstruments) {\r\n                                    $('.stored-payments').empty().html(\r\n                                        data.renderedPaymentInstruments\r\n                                    );\r\n                                }\r\n\r\n                                if (data.customer.registeredUser\r\n                                    && data.customer.customerPaymentInstruments.length\r\n                                ) {\r\n                                    $('.cancel-new-payment').removeClass('checkout-hidden');\r\n                                }\r\n\r\n                                defer.resolve(data);\r\n                            }\r\n                        },\r\n                        error: function (err) {\r\n                            if (err.responseJSON.redirectUrl) {\r\n                                window.location.href = err.responseJSON.redirectUrl;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    return defer;\r\n                } else if (stage === 'placeOrder') {\r\n                    $.ajax({\r\n                        url: $('.place-order').data('action'),\r\n                        method: 'POST',\r\n                        success: function (data) {\r\n                            if (data.error) {\r\n                                if (data.cartError) {\r\n                                    window.location.href = data.redirectUrl;\r\n                                    defer.reject();\r\n                                } else {\r\n                                    // go to appropriate stage and display error message\r\n                                    defer.reject(data);\r\n                                }\r\n                            } else {\r\n                                var continueUrl = data.continueUrl;\r\n                                var urlParams = {\r\n                                    ID: data.orderID,\r\n                                    token: data.orderToken\r\n                                };\r\n\r\n                                continueUrl += (continueUrl.indexOf('?') !== -1 ? '&' : '?') +\r\n                                    Object.keys(urlParams).map(function (key) {\r\n                                        return key + '=' + encodeURIComponent(urlParams[key]);\r\n                                    }).join('&');\r\n\r\n                                window.location.href = continueUrl;\r\n                                defer.resolve(data);\r\n                            }\r\n                        },\r\n                        error: function () {\r\n                        }\r\n                    });\r\n\r\n                    return defer;\r\n                }\r\n                var p = $('<div>').promise(); // eslint-disable-line\r\n                setTimeout(function () {\r\n                    p.done(); // eslint-disable-line\r\n                }, 500);\r\n                return p; // eslint-disable-line\r\n            },\r\n\r\n            /**\r\n             * Initialize the checkout stage.\r\n             *\r\n             * TODO: update this to allow stage to be set from server?\r\n             */\r\n            initialize: function () {\r\n                // set the initial state of checkout\r\n                members.currentStage = checkoutStages\r\n                    .indexOf($('.data-checkout-stage').data('checkout-stage'));\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n\r\n                //\r\n                // Handle Payment option selection\r\n                //\r\n                $('input[name$=\"paymentMethod\"]', plugin).on('change', function () {\r\n                    $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');\r\n                });\r\n\r\n                //\r\n                // Handle Next State button click\r\n                //\r\n                $(plugin).on('click', '.next-step-button button', function () {\r\n                    members.nextStage();\r\n                });\r\n\r\n                //\r\n                // Handle Edit buttons on shipping and payment summary cards\r\n                //\r\n                $('.shipping-summary .edit-button', plugin).on('click', function () {\r\n                    if (!$('#checkout-main').hasClass('multi-ship')) {\r\n                        $('body').trigger('shipping:selectSingleShipping');\r\n                    }\r\n\r\n                    members.gotoStage('shipping');\r\n                });\r\n\r\n                $('.payment-summary .edit-button', plugin).on('click', function () {\r\n                    members.gotoStage('payment');\r\n                });\r\n\r\n                //\r\n                // remember stage (e.g. shipping)\r\n                //\r\n                updateUrl(members.currentStage);\r\n\r\n                //\r\n                // Listen for foward/back button press and move to correct checkout-stage\r\n                //\r\n                $(window).on('popstate', function (e) {\r\n                    //\r\n                    // Back button when event state less than current state in ordered\r\n                    // checkoutStages array.\r\n                    //\r\n                    if (e.state === null ||\r\n                         checkoutStages.indexOf(e.state) < members.currentStage) {\r\n                        members.handlePrevStage(false);\r\n                    } else if (checkoutStages.indexOf(e.state) > members.currentStage) {\r\n                        // Forward button  pressed\r\n                        members.handleNextStage(false);\r\n                    }\r\n                });\r\n\r\n                //\r\n                // Set the form data\r\n                //\r\n                plugin.data('formData', formData);\r\n            },\r\n\r\n            /**\r\n             * The next checkout state step updates the css for showing correct buttons etc...\r\n             */\r\n            nextStage: function () {\r\n                var promise = members.updateStage();\r\n\r\n                promise.done(function () {\r\n                    // Update UI with new stage\r\n                    members.handleNextStage(true);\r\n                });\r\n\r\n                promise.fail(function (data) {\r\n                    // show errors\r\n                    if (data) {\r\n                        if (data.errorStage) {\r\n                            members.gotoStage(data.errorStage.stage);\r\n\r\n                            if (data.errorStage.step === 'billingAddress') {\r\n                                var $billingAddressSameAsShipping = $(\r\n                                    'input[name$=\"_shippingAddressUseAsBillingAddress\"]'\r\n                                );\r\n                                if ($billingAddressSameAsShipping.is(':checked')) {\r\n                                    $billingAddressSameAsShipping.prop('checked', false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (data.errorMessage) {\r\n                            $('.error-message').show();\r\n                            $('.error-message-text').text(data.errorMessage);\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * The next checkout state step updates the css for showing correct buttons etc...\r\n             *\r\n             * @param {boolean} bPushState - boolean when true pushes state using the history api.\r\n             */\r\n            handleNextStage: function (bPushState) {\r\n                if (members.currentStage < checkoutStages.length - 1) {\r\n                    // move stage forward\r\n                    members.currentStage++;\r\n\r\n                    //\r\n                    // show new stage in url (e.g.payment)\r\n                    //\r\n                    if (bPushState) {\r\n                        updateUrl(members.currentStage);\r\n                    }\r\n                }\r\n\r\n                // Set the next stage on the DOM\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            },\r\n\r\n            /**\r\n             * Previous State\r\n             */\r\n            handlePrevStage: function () {\r\n                if (members.currentStage > 0) {\r\n                    // move state back\r\n                    members.currentStage--;\r\n                    updateUrl(members.currentStage);\r\n                }\r\n\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            },\r\n\r\n            /**\r\n             * Use window history to go to a checkout stage\r\n             * @param {string} stageName - the checkout state to goto\r\n             */\r\n            gotoStage: function (stageName) {\r\n                members.currentStage = checkoutStages.indexOf(stageName);\r\n                updateUrl(members.currentStage);\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            }\r\n        };\r\n\r\n        //\r\n        // Initialize the checkout\r\n        //\r\n        members.initialize();\r\n\r\n        return this;\r\n    };\r\n}(jQuery));\r\n\r\n\r\nvar exports = {\r\n    initialize: function () {\r\n        $('#checkout-main').checkout();\r\n    },\r\n\r\n    updateCheckoutView: function () {\r\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\r\n            shippingHelpers.methods.updateMultiShipInformation(data.order);\r\n            summaryHelpers.updateTotals(data.order.totals);\r\n            data.order.shipping.forEach(function (shipping) {\r\n                shippingHelpers.methods.updateShippingInformation(\r\n                    shipping,\r\n                    data.order,\r\n                    data.customer,\r\n                    data.options\r\n                );\r\n            });\r\n            billingHelpers.methods.updateBillingInformation(\r\n                data.order,\r\n                data.customer,\r\n                data.options\r\n            );\r\n            billingHelpers.methods.updatePaymentInformation(data.order, data.options);\r\n            summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\r\n        });\r\n    }\r\n};\r\n\r\n[billingHelpers, shippingHelpers, addressHelpers].forEach(function (library) {\r\n    Object.keys(library).forEach(function (item) {\r\n        if (typeof library[item] === 'object') {\r\n            exports[item] = $.extend({}, exports[item], library[item]);\r\n        } else {\r\n            exports[item] = library[item];\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = exports;\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/checkout.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js":
/*!*******************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * Display error messages and highlight form fields with errors.\r\n * @param {string} parentSelector - the form which contains the fields\r\n * @param {Object} fieldErrors - the fields with errors\r\n */\r\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\r\n    // Display error messages and highlight form fields with errors.\r\n    $.each(fieldErrors, function (attr) {\r\n        $('*[name=' + attr + ']', parentSelector)\r\n        .addClass('is-invalid')\r\n        .siblings('.invalid-feedback')\r\n        .html(fieldErrors[attr]);\r\n    });\r\n}\r\n\r\n/**\r\n * Clear the form errors.\r\n * @param {string} parentSelector - the parent form selector.\r\n */\r\nfunction clearPreviousErrors(parentSelector) {\r\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\r\n    $('.error-message').hide();\r\n}\r\n\r\nmodule.exports = {\r\n    loadFormErrors: loadFormErrors,\r\n    clearPreviousErrors: clearPreviousErrors\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\r\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"./cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\r\n\r\n/**\r\n * updates the shipping address selector within shipping forms\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n * @param {Object} customer - the customer model\r\n */\r\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\r\n    var uuidEl = $('input[value=' + productLineItem.UUID + ']');\r\n    var shippings = order.shipping;\r\n\r\n    var form;\r\n    var $shippingAddressSelector;\r\n    var hasSelectedAddress = false;\r\n\r\n    if (uuidEl && uuidEl.length > 0) {\r\n        form = uuidEl[0].form;\r\n        $shippingAddressSelector = $('.addressSelector', form);\r\n    }\r\n\r\n    if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {\r\n        $shippingAddressSelector.empty();\r\n        // Add New Address option\r\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            null,\r\n            false,\r\n            order\r\n        ));\r\n\r\n        if (customer.addresses && customer.addresses.length > 0) {\r\n            $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n                order.resources.accountAddresses,\r\n                false,\r\n                order\r\n            ));\r\n\r\n            customer.addresses.forEach(function (address) {\r\n                var isSelected = shipping.matchingAddressId === address.ID;\r\n                $shippingAddressSelector.append(\r\n                    addressHelpers.methods.optionValueForAddress(\r\n                        { UUID: 'ab_' + address.ID, shippingAddress: address },\r\n                        isSelected,\r\n                        order\r\n                    )\r\n                );\r\n            });\r\n        }\r\n        // Separator -\r\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            order.resources.shippingAddresses, false, order, { className: 'multi-shipping' }\r\n        ));\r\n        shippings.forEach(function (aShipping) {\r\n            var isSelected = shipping.UUID === aShipping.UUID;\r\n            hasSelectedAddress = hasSelectedAddress || isSelected;\r\n            var addressOption = addressHelpers.methods.optionValueForAddress(\r\n                aShipping,\r\n                isSelected,\r\n                order,\r\n                { className: 'multi-shipping' }\r\n            );\r\n\r\n            var newAddress = addressOption.html() === order.resources.addNewAddress;\r\n            var matchingUUID = aShipping.UUID === shipping.UUID;\r\n            if ((newAddress && matchingUUID) || (!newAddress && matchingUUID) || (!newAddress && !matchingUUID)) {\r\n                $shippingAddressSelector.append(addressOption);\r\n            }\r\n            if (newAddress && !matchingUUID) {\r\n                $(addressOption[0]).remove();\r\n            }\r\n        });\r\n    }\r\n\r\n    if (!hasSelectedAddress) {\r\n        // show\r\n        $(form).addClass('hide-details');\r\n    } else {\r\n        $(form).removeClass('hide-details');\r\n    }\r\n\r\n    $('body').trigger('shipping:updateShippingAddressSelector', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping,\r\n        order: order,\r\n        customer: customer\r\n    });\r\n}\r\n\r\n/**\r\n * updates the shipping address form values within shipping forms\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateShippingAddressFormValues(shipping) {\r\n    var addressObject = $.extend({}, shipping.shippingAddress);\r\n\r\n    if (!addressObject) {\r\n        addressObject = {\r\n            firstName: null,\r\n            lastName: null,\r\n            address1: null,\r\n            address2: null,\r\n            city: null,\r\n            postalCode: null,\r\n            stateCode: null,\r\n            countryCode: null,\r\n            phone: null\r\n        };\r\n    }\r\n\r\n    addressObject.isGift = shipping.isGift;\r\n    addressObject.giftMessage = shipping.giftMessage;\r\n\r\n    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n        var form = el.form;\r\n        if (!form) return;\r\n        var countryCode = addressObject.countryCode;\r\n\r\n        $('input[name$=_firstName]', form).val(addressObject.firstName);\r\n        $('input[name$=_lastName]', form).val(addressObject.lastName);\r\n        $('input[name$=_address1]', form).val(addressObject.address1);\r\n        $('input[name$=_address2]', form).val(addressObject.address2);\r\n        $('input[name$=_city]', form).val(addressObject.city);\r\n        $('input[name$=_postalCode]', form).val(addressObject.postalCode);\r\n        $('select[name$=_stateCode],input[name$=_stateCode]', form)\r\n            .val(addressObject.stateCode);\r\n\r\n        if (countryCode && typeof countryCode === 'object') {\r\n            $('select[name$=_country]', form).val(addressObject.countryCode.value);\r\n        } else {\r\n            $('select[name$=_country]', form).val(addressObject.countryCode);\r\n        }\r\n\r\n        $('input[name$=_phone]', form).val(addressObject.phone);\r\n\r\n        $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);\r\n        $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingAddressFormValues', { shipping: shipping });\r\n}\r\n\r\n/**\r\n * updates the shipping method radio buttons within shipping forms\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateShippingMethods(shipping) {\r\n    var uuidEl = $('input[value=' + shipping.UUID + ']');\r\n    if (uuidEl && uuidEl.length > 0) {\r\n        $.each(uuidEl, function (shipmentIndex, el) {\r\n            var form = el.form;\r\n            if (!form) return;\r\n\r\n            var $shippingMethodList = $('.shipping-method-list', form);\r\n\r\n            if ($shippingMethodList && $shippingMethodList.length > 0) {\r\n                $shippingMethodList.empty();\r\n                var shippingMethods = shipping.applicableShippingMethods;\r\n                var selected = shipping.selectedShippingMethod || {};\r\n                var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID';\r\n                //\r\n                // Create the new rows for each shipping method\r\n                //\r\n                $.each(shippingMethods, function (methodIndex, shippingMethod) {\r\n                    var tmpl = $('#shipping-method-template').clone();\r\n                    // set input\r\n                    $('input', tmpl)\r\n                        .prop('id', 'shippingMethod-' + shippingMethod.ID)\r\n                        .prop('name', shippingMethodFormID)\r\n                        .prop('value', shippingMethod.ID)\r\n                        .attr('checked', shippingMethod.ID === selected.ID);\r\n\r\n                    $('label', tmpl)\r\n                        .prop('for', 'shippingMethod-' + shippingMethod.ID);\r\n                    // set shipping method name\r\n                    $('.display-name', tmpl).text(shippingMethod.displayName);\r\n                    // set or hide arrival time\r\n                    if (shippingMethod.estimatedArrivalTime) {\r\n                        $('.arrival-time', tmpl)\r\n                            .text('(' + shippingMethod.estimatedArrivalTime + ')')\r\n                            .show();\r\n                    }\r\n                    // set shipping cost\r\n                    $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);\r\n                    $shippingMethodList.append(tmpl.html());\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    $('body').trigger('shipping:updateShippingMethods', { shipping: shipping });\r\n}\r\n\r\n/**\r\n * Update list of available shipping methods whenever user modifies shipping address details.\r\n * @param {jQuery} $shippingForm - current shipping form\r\n */\r\nfunction updateShippingMethodList($shippingForm) {\r\n    // delay for autocomplete!\r\n    setTimeout(function () {\r\n        var $shippingMethodList = $shippingForm.find('.shipping-method-list');\r\n        var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\r\n        var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\r\n        var url = $shippingMethodList.data('actionUrl');\r\n        urlParams.shipmentUUID = shipmentUUID;\r\n\r\n        $shippingMethodList.spinner().start();\r\n        $.ajax({\r\n            url: url,\r\n            type: 'post',\r\n            dataType: 'json',\r\n            data: urlParams,\r\n            success: function (data) {\r\n                if (data.error) {\r\n                    window.location.href = data.redirectUrl;\r\n                } else {\r\n                    $('body').trigger('checkout:updateCheckoutView',\r\n                        {\r\n                            order: data.order,\r\n                            customer: data.customer,\r\n                            options: { keepOpen: true }\r\n                        });\r\n\r\n                    $shippingMethodList.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    }, 300);\r\n}\r\n\r\n/**\r\n * updates the order shipping summary for an order shipment model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateShippingSummaryInformation(shipping, order) {\r\n    $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {\r\n        var $container = $(el);\r\n        var $shippingAddressLabel = $container.find('.shipping-addr-label');\r\n        var $addressContainer = $container.find('.address-summary');\r\n        var $shippingPhone = $container.find('.shipping-phone');\r\n        var $methodTitle = $container.find('.shipping-method-title');\r\n        var $methodArrivalTime = $container.find('.shipping-method-arrival-time');\r\n        var $methodPrice = $container.find('.shipping-method-price');\r\n        var $shippingSummaryLabel = $container.find('.shipping-method-label');\r\n        var $summaryDetails = $container.find('.row.summary-details');\r\n        var giftMessageSummary = $container.find('.gift-summary');\r\n\r\n        var address = shipping.shippingAddress;\r\n        var selectedShippingMethod = shipping.selectedShippingMethod;\r\n        var isGift = shipping.isGift;\r\n\r\n        addressHelpers.methods.populateAddressSummary($addressContainer, address);\r\n\r\n        if (address && address.phone) {\r\n            $shippingPhone.text(address.phone);\r\n        } else {\r\n            $shippingPhone.empty();\r\n        }\r\n\r\n        if (selectedShippingMethod) {\r\n            $('body').trigger('shipping:updateAddressLabelText',\r\n                { selectedShippingMethod: selectedShippingMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n            $shippingSummaryLabel.show();\r\n            $summaryDetails.show();\r\n            $methodTitle.text(selectedShippingMethod.displayName);\r\n            if (selectedShippingMethod.estimatedArrivalTime) {\r\n                $methodArrivalTime.text(\r\n                    '( ' + selectedShippingMethod.estimatedArrivalTime + ' )'\r\n                );\r\n            } else {\r\n                $methodArrivalTime.empty();\r\n            }\r\n            $methodPrice.text(selectedShippingMethod.shippingCost);\r\n        }\r\n\r\n        if (isGift) {\r\n            giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);\r\n            giftMessageSummary.removeClass('d-none');\r\n        } else {\r\n            giftMessageSummary.addClass('d-none');\r\n        }\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingSummaryInformation', { shipping: shipping, order: order });\r\n}\r\n\r\n/**\r\n * Update the read-only portion of the shipment display (per PLI)\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n * @param {Object} [options] - options for updating PLI summary info\r\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\r\n */\r\nfunction updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {\r\n    var $pli = $('input[value=' + productLineItem.UUID + ']');\r\n    var form = $pli && $pli.length > 0 ? $pli[0].form : null;\r\n\r\n    if (!form) return;\r\n\r\n    var $viewBlock = $('.view-address-block', form);\r\n\r\n    var address = shipping.shippingAddress || {};\r\n    var selectedMethod = shipping.selectedShippingMethod;\r\n\r\n    var nameLine = address.firstName ? address.firstName + ' ' : '';\r\n    if (address.lastName) nameLine += address.lastName;\r\n\r\n    var address1Line = address.address1;\r\n    var address2Line = address.address2;\r\n\r\n    var phoneLine = address.phone;\r\n\r\n    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\r\n    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\r\n    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\r\n        ? '(' + selectedMethod.estimatedArrivalTime + ')'\r\n        : '';\r\n\r\n    var tmpl = $('#pli-shipping-summary-template').clone();\r\n\r\n    $('.ship-to-name', tmpl).text(nameLine);\r\n    $('.ship-to-address1', tmpl).text(address1Line);\r\n    $('.ship-to-address2', tmpl).text(address2Line);\r\n    $('.ship-to-city', tmpl).text(address.city);\r\n    if (address.stateCode) {\r\n        $('.ship-to-st', tmpl).text(address.stateCode);\r\n    }\r\n    $('.ship-to-zip', tmpl).text(address.postalCode);\r\n    $('.ship-to-phone', tmpl).text(phoneLine);\r\n\r\n    if (!address2Line) {\r\n        $('.ship-to-address2', tmpl).hide();\r\n    }\r\n\r\n    if (!phoneLine) {\r\n        $('.ship-to-phone', tmpl).hide();\r\n    }\r\n\r\n    if (shipping.selectedShippingMethod) {\r\n        $('.display-name', tmpl).text(methodNameLine);\r\n        $('.arrival-time', tmpl).text(methodArrivalTime);\r\n        $('.price', tmpl).text(shippingCost);\r\n    }\r\n\r\n    if (shipping.isGift) {\r\n        $('.gift-message-summary', tmpl).text(shipping.giftMessage);\r\n        var shipment = $('.gift-message-' + shipping.UUID);\r\n        $(shipment).val(shipping.giftMessage);\r\n    } else {\r\n        $('.gift-summary', tmpl).addClass('d-none');\r\n    }\r\n    // checking h5 title shipping to or pickup\r\n    var $shippingAddressLabel = $('.shipping-header-text', tmpl);\r\n    $('body').trigger('shipping:updateAddressLabelText',\r\n        { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n\r\n    $viewBlock.html(tmpl.html());\r\n\r\n    $('body').trigger('shipping:updatePLIShippingSummaryInformation', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping,\r\n        order: order,\r\n        options: options\r\n    });\r\n}\r\n\r\n/**\r\n * Update the hidden form values that associate shipping info with product line items\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\r\n    $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {\r\n        var form = pli.form;\r\n        $('[name=shipmentUUID]', form).val(shipping.UUID);\r\n        $('[name=originalShipmentUUID]', form).val(shipping.UUID);\r\n\r\n        $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);\r\n    });\r\n\r\n    $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping\r\n    });\r\n}\r\n\r\n/**\r\n * Update the shipping UI for a single shipping info (shipment model)\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order/basket model\r\n * @param {Object} customer - the customer model\r\n * @param {Object} [options] - options for updating PLI summary info\r\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\r\n */\r\nfunction updateShippingInformation(shipping, order, customer, options) {\r\n    // First copy over shipmentUUIDs from response, to each PLI form\r\n    order.shipping.forEach(function (aShipping) {\r\n        aShipping.productLineItems.items.forEach(function (productLineItem) {\r\n            updateProductLineItemShipmentUUIDs(productLineItem, aShipping);\r\n        });\r\n    });\r\n\r\n    // Now update shipping information, based on those associations\r\n    updateShippingMethods(shipping);\r\n    updateShippingAddressFormValues(shipping);\r\n    updateShippingSummaryInformation(shipping, order);\r\n\r\n    // And update the PLI-based summary information as well\r\n    shipping.productLineItems.items.forEach(function (productLineItem) {\r\n        updateShippingAddressSelector(productLineItem, shipping, order, customer);\r\n        updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingInformation', {\r\n        order: order,\r\n        shipping: shipping,\r\n        customer: customer,\r\n        options: options\r\n    });\r\n}\r\n\r\n/**\r\n * Update the checkout state (single vs. multi-ship)\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n */\r\nfunction updateMultiShipInformation(order) {\r\n    var $checkoutMain = $('#checkout-main');\r\n    var $checkbox = $('[name=usingMultiShipping]');\r\n    var $submitShippingBtn = $('button.submit-shipping');\r\n    $('.shipping-error .alert-danger').remove();\r\n\r\n    if (order.usingMultiShipping) {\r\n        $checkoutMain.addClass('multi-ship');\r\n        $checkbox.prop('checked', true);\r\n    } else {\r\n        $checkoutMain.removeClass('multi-ship');\r\n        $checkbox.prop('checked', null);\r\n        $submitShippingBtn.prop('disabled', null);\r\n    }\r\n\r\n    $('body').trigger('shipping:updateMultiShipInformation', { order: order });\r\n}\r\n\r\n/**\r\n  * Create an alert to display the error message\r\n  * @param {Object} message - Error message to display\r\n  */\r\nfunction createErrorNotification(message) {\r\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n    'fade show\" role=\"alert\">' +\r\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n    '<span aria-hidden=\"true\">&times;</span>' +\r\n    '</button>' + message + '</div>';\r\n\r\n    $('.shipping-error').append(errorHtml);\r\n}\r\n\r\n/**\r\n * Handle response from the server for valid or invalid form fields.\r\n * @param {Object} defer - the deferred object which will resolve on success or reject.\r\n * @param {Object} data - the response data with the invalid form fields or\r\n *  valid model data.\r\n */\r\nfunction shippingFormResponse(defer, data) {\r\n    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\r\n    var formSelector = isMultiShip\r\n        ? '.multi-shipping .active form'\r\n        : '.single-shipping form';\r\n\r\n    // highlight fields with errors\r\n    if (data.error) {\r\n        if (data.fieldErrors.length) {\r\n            data.fieldErrors.forEach(function (error) {\r\n                if (Object.keys(error).length) {\r\n                    formHelpers.loadFormErrors(formSelector, error);\r\n                }\r\n            });\r\n            defer.reject(data);\r\n        }\r\n\r\n        if (data.serverErrors && data.serverErrors.length) {\r\n            $.each(data.serverErrors, function (index, element) {\r\n                createErrorNotification(element);\r\n            });\r\n\r\n            defer.reject(data);\r\n        }\r\n\r\n        if (data.cartError) {\r\n            window.location.href = data.redirectUrl;\r\n            defer.reject();\r\n        }\r\n    } else {\r\n        // Populate the Address Summary\r\n\r\n        $('body').trigger('checkout:updateCheckoutView', {\r\n            order: data.order,\r\n            customer: data.customer\r\n        });\r\n\r\n        defer.resolve(data);\r\n    }\r\n}\r\n/**\r\n * Clear out all the shipping form values and select the new address in the drop down\r\n * @param {Object} order - the order object\r\n */\r\nfunction clearShippingForms(order) {\r\n    order.shipping.forEach(function (shipping) {\r\n        $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n            var form = el.form;\r\n            if (!form) return;\r\n\r\n            $('input[name$=_firstName]', form).val(null);\r\n            $('input[name$=_lastName]', form).val(null);\r\n            $('input[name$=_address1]', form).val(null);\r\n            $('input[name$=_address2]', form).val(null);\r\n            $('input[name$=_city]', form).val(null);\r\n            $('input[name$=_postalCode]', form).val(null);\r\n            $('select[name$=_stateCode],input[name$=_stateCode]', form).val(null);\r\n            $('select[name$=_country]', form).val(null);\r\n\r\n            $('input[name$=_phone]', form).val(null);\r\n\r\n            $('input[name$=_isGift]', form).prop('checked', false);\r\n            $('textarea[name$=_giftMessage]', form).val('');\r\n            $(form).find('.gift-message').addClass('d-none');\r\n\r\n            $(form).attr('data-address-mode', 'new');\r\n            var addressSelectorDropDown = $('.addressSelector option[value=new]', form);\r\n            $(addressSelectorDropDown).prop('selected', true);\r\n        });\r\n    });\r\n\r\n    $('body').trigger('shipping:clearShippingForms', { order: order });\r\n}\r\n\r\n/**\r\n * Does Ajax call to create a server-side shipment w/ pliUUID & URL\r\n * @param {string} url - string representation of endpoint URL\r\n * @param {Object} shipmentData - product line item UUID\r\n * @returns {Object} - promise value for async call\r\n */\r\nfunction createNewShipment(url, shipmentData) {\r\n    $.spinner().start();\r\n    return $.ajax({\r\n        url: url,\r\n        type: 'post',\r\n        dataType: 'json',\r\n        data: shipmentData\r\n    });\r\n}\r\n\r\n/**\r\n * Does Ajax call to select shipping method\r\n * @param {string} url - string representation of endpoint URL\r\n * @param {Object} urlParams - url params\r\n * @param {Object} el - element that triggered this call\r\n */\r\nfunction selectShippingMethodAjax(url, urlParams, el) {\r\n    $.spinner().start();\r\n    $.ajax({\r\n        url: url,\r\n        type: 'post',\r\n        dataType: 'json',\r\n        data: urlParams\r\n    })\r\n        .done(function (data) {\r\n            if (data.error) {\r\n                window.location.href = data.redirectUrl;\r\n            } else {\r\n                $('body').trigger('checkout:updateCheckoutView',\r\n                    {\r\n                        order: data.order,\r\n                        customer: data.customer,\r\n                        options: { keepOpen: true },\r\n                        urlParams: urlParams\r\n                    }\r\n                );\r\n                $('body').trigger('checkout:postUpdateCheckoutView',\r\n                    {\r\n                        el: el\r\n                    }\r\n                );\r\n            }\r\n            $.spinner().stop();\r\n        })\r\n        .fail(function () {\r\n            $.spinner().stop();\r\n        });\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction enterMultishipView(element) {\r\n    element.find('.btn-enter-multi-ship').removeClass('d-none');\r\n\r\n    element.find('.view-address-block').addClass('d-none');\r\n    element.find('.shipping-address').addClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\r\n    element.find('.btn-edit-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction viewMultishipAddress(element) {\r\n    element.find('.view-address-block').removeClass('d-none');\r\n    element.find('.btn-edit-multi-ship').removeClass('d-none');\r\n\r\n    element.find('.shipping-address').addClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\r\n    element.find('.btn-enter-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements that allows the user to edit multi ship address information\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction editMultiShipAddress(element) {\r\n    // Show\r\n    element.find('.shipping-address').removeClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none');\r\n\r\n    // Hide\r\n    element.find('.view-address-block').addClass('d-none');\r\n    element.find('.btn-enter-multi-ship').addClass('d-none');\r\n    element.find('.btn-edit-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n\r\n    $('body').trigger('shipping:editMultiShipAddress', { element: element, form: element.find('.shipping-form') });\r\n}\r\n\r\n/**\r\n * perform the proper actions once a user has clicked enter address or edit address for a shipment\r\n * @param {jQuery} element - The shipping content\r\n * @param {string} mode - the address mode\r\n */\r\nfunction editOrEnterMultiShipInfo(element, mode) {\r\n    var form = $(element).closest('form');\r\n    var root = $(element).closest('.shipping-content');\r\n\r\n    $('body').trigger('shipping:updateDataAddressMode', { form: form, mode: mode });\r\n\r\n    editMultiShipAddress(root);\r\n\r\n    var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);\r\n\r\n    var savedState = {\r\n        UUID: $('input[name=shipmentUUID]', form).val(),\r\n        shippingAddress: addressInfo\r\n    };\r\n\r\n    root.data('saved-state', JSON.stringify(savedState));\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        updateShippingAddressSelector: updateShippingAddressSelector,\r\n        updateShippingAddressFormValues: updateShippingAddressFormValues,\r\n        updateShippingMethods: updateShippingMethods,\r\n        updateShippingSummaryInformation: updateShippingSummaryInformation,\r\n        updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,\r\n        updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,\r\n        updateShippingInformation: updateShippingInformation,\r\n        updateMultiShipInformation: updateMultiShipInformation,\r\n        shippingFormResponse: shippingFormResponse,\r\n        createNewShipment: createNewShipment,\r\n        selectShippingMethodAjax: selectShippingMethodAjax,\r\n        updateShippingMethodList: updateShippingMethodList,\r\n        clearShippingForms: clearShippingForms,\r\n        editMultiShipAddress: editMultiShipAddress,\r\n        editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,\r\n        createErrorNotification: createErrorNotification,\r\n        viewMultishipAddress: viewMultishipAddress\r\n    },\r\n\r\n    selectShippingMethod: function () {\r\n        $('.shipping-method-list').change(function () {\r\n            var $shippingForm = $(this).parents('form');\r\n            var methodID = $(':checked', this).val();\r\n            var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\r\n            var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\r\n            urlParams.shipmentUUID = shipmentUUID;\r\n            urlParams.methodID = methodID;\r\n            urlParams.isGift = $shippingForm.find('.gift').prop('checked');\r\n            urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();\r\n\r\n            var url = $(this).data('select-shipping-method-url');\r\n            selectShippingMethodAjax(url, urlParams, $(this));\r\n        });\r\n    },\r\n\r\n    toggleMultiship: function () {\r\n        $('input[name=\"usingMultiShipping\"]').on('change', function () {\r\n            var url = $('.multi-shipping-checkbox-block form').attr('action');\r\n            var usingMultiShip = this.checked;\r\n\r\n            $.ajax({\r\n                url: url,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                data: { usingMultiShip: usingMultiShip },\r\n                success: function (response) {\r\n                    if (response.error) {\r\n                        window.location.href = response.redirectUrl;\r\n                    } else {\r\n                        $('body').trigger('checkout:updateCheckoutView', {\r\n                            order: response.order,\r\n                            customer: response.customer\r\n                        });\r\n\r\n                        if ($('#checkout-main').data('customer-type') === 'guest') {\r\n                            clearShippingForms(response.order);\r\n                        } else {\r\n                            response.order.shipping.forEach(function (shipping) {\r\n                                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n                                    var form = el.form;\r\n                                    if (!form) return;\r\n\r\n                                    $(form).attr('data-address-mode', 'edit');\r\n                                    var addressSelectorDropDown = $(form).find('.addressSelector option[value=\"ab_' + shipping.matchingAddressId + '\"]');\r\n                                    $(addressSelectorDropDown).prop('selected', true);\r\n                                    $('input[name$=_isGift]', form).prop('checked', false);\r\n                                    $('textarea[name$=_giftMessage]', form).val('');\r\n                                    $(form).find('.gift-message').addClass('d-none');\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        if (usingMultiShip) {\r\n                            $('body').trigger('shipping:selectMultiShipping', { data: response });\r\n                        } else {\r\n                            $('body').trigger('shipping:selectSingleShipping', { data: response });\r\n                        }\r\n                    }\r\n\r\n                    $.spinner().stop();\r\n                },\r\n                error: function () {\r\n                    $.spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    selectSingleShipping: function () {\r\n        $('body').on('shipping:selectSingleShipping', function () {\r\n            $('.single-shipping .shipping-address').removeClass('d-none');\r\n        });\r\n    },\r\n\r\n    selectMultiShipping: function () {\r\n        $('body').on('shipping:selectMultiShipping', function (e, data) {\r\n            $('.multi-shipping .shipping-address').addClass('d-none');\r\n\r\n            data.data.order.shipping.forEach(function (shipping) {\r\n                var element = $('.multi-shipping .card[data-shipment-uuid=\"' + shipping.UUID + '\"]');\r\n\r\n                if (shipping.shippingAddress) {\r\n                    viewMultishipAddress($(element));\r\n                } else {\r\n                    enterMultishipView($(element));\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    selectSingleShipAddress: function () {\r\n        $('.single-shipping .addressSelector').on('change', function () {\r\n            var form = $(this).parents('form')[0];\r\n            var selectedOption = $('option:selected', this);\r\n            var attrs = selectedOption.data();\r\n            var shipmentUUID = selectedOption[0].value;\r\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\r\n            var element;\r\n\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                element = attr === 'countryCode' ? 'country' : attr;\r\n                $('[name$=' + element + ']', form).val(attrs[attr]);\r\n            });\r\n\r\n            $('[name$=stateCode]', form).trigger('change');\r\n\r\n            if (shipmentUUID === 'new') {\r\n                $(form).attr('data-address-mode', 'new');\r\n            } else if (shipmentUUID === originalUUID) {\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\r\n                $(form).attr('data-address-mode', 'customer');\r\n            } else {\r\n                $(form).attr('data-address-mode', 'edit');\r\n            }\r\n        });\r\n    },\r\n\r\n    selectMultiShipAddress: function () {\r\n        $('.multi-shipping .addressSelector').on('change', function () {\r\n            var form = $(this).closest('form');\r\n            var selectedOption = $('option:selected', this);\r\n            var attrs = selectedOption.data();\r\n            var shipmentUUID = selectedOption[0].value;\r\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\r\n            var pliUUID = $('input[name=productLineItemUUID]', form).val();\r\n\r\n            var element;\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                if (attr === 'isGift') {\r\n                    $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);\r\n                    $('[name$=' + attr + ']', form).trigger('change');\r\n                } else {\r\n                    element = attr === 'countryCode' ? 'country' : attr;\r\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\r\n                }\r\n            });\r\n\r\n            if (shipmentUUID === 'new' && pliUUID) {\r\n                var createShipmentUrl = $(this).attr('data-create-shipment-url');\r\n                createNewShipment(createShipmentUrl, { productLineItemUUID: pliUUID })\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'new');\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            } else if (shipmentUUID === originalUUID) {\r\n                $('select[name$=stateCode]', form).trigger('change');\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\r\n                var url = $(form).attr('action');\r\n                var serializedData = $(form).serialize();\r\n                createNewShipment(url, serializedData)\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'customer');\r\n                        var $rootEl = $(form).closest('.shipping-content');\r\n                        editMultiShipAddress($rootEl);\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            } else {\r\n                var updatePLIShipmentUrl = $(form).attr('action');\r\n                var serializedAddress = $(form).serialize();\r\n                createNewShipment(updatePLIShipmentUrl, serializedAddress)\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'edit');\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            }\r\n        });\r\n    },\r\n\r\n    updateShippingList: function () {\r\n        $('select[name$=\"shippingAddress_addressFields_states_stateCode\"]')\r\n            .on('change', function (e) {\r\n                updateShippingMethodList($(e.currentTarget.form));\r\n            });\r\n    },\r\n\r\n    updateDataAddressMode: function () {\r\n        $('body').on('shipping:updateDataAddressMode', function (e, data) {\r\n            $(data.form).attr('data-address-mode', data.mode);\r\n        });\r\n    },\r\n\r\n    enterMultiShipInfo: function () {\r\n        $('.btn-enter-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            editOrEnterMultiShipInfo($(this), 'new');\r\n        });\r\n    },\r\n\r\n    editMultiShipInfo: function () {\r\n        $('.btn-edit-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            editOrEnterMultiShipInfo($(this), 'edit');\r\n        });\r\n    },\r\n\r\n    saveMultiShipInfo: function () {\r\n        $('.btn-save-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            // Save address to checkoutAddressBook\r\n            var form = $(this).closest('form');\r\n            var $rootEl = $(this).closest('.shipping-content');\r\n            var data = $(form).serialize();\r\n            var url = $(form).attr('action');\r\n\r\n            $rootEl.spinner().start();\r\n            $.ajax({\r\n                url: url,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                data: data\r\n            })\r\n                .done(function (response) {\r\n                    formHelpers.clearPreviousErrors(form);\r\n                    if (response.error) {\r\n                        if (response.fieldErrors && response.fieldErrors.length) {\r\n                            response.fieldErrors.forEach(function (error) {\r\n                                if (Object.keys(error).length) {\r\n                                    formHelpers.loadFormErrors(form, error);\r\n                                }\r\n                            });\r\n                        } else if (response.serverErrors && response.serverErrors.length) {\r\n                            $.each(response.serverErrors, function (index, element) {\r\n                                createErrorNotification(element);\r\n                            });\r\n                        }\r\n                    } else {\r\n                        // Update UI from response\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer\r\n                            }\r\n                        );\r\n\r\n                        viewMultishipAddress($rootEl);\r\n                    }\r\n\r\n                    if (response.order && response.order.shippable) {\r\n                        $('button.submit-shipping').attr('disabled', null);\r\n                    }\r\n\r\n                    $rootEl.spinner().stop();\r\n                })\r\n                .fail(function (err) {\r\n                    if (err.responseJSON.redirectUrl) {\r\n                        window.location.href = err.responseJSON.redirectUrl;\r\n                    }\r\n\r\n                    $rootEl.spinner().stop();\r\n                });\r\n\r\n            return false;\r\n        });\r\n    },\r\n\r\n    cancelMultiShipAddress: function () {\r\n        $('.btn-cancel-multi-ship-address').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            var form = $(this).closest('form');\r\n            var $rootEl = $(this).closest('.shipping-content');\r\n            var restoreState = $rootEl.data('saved-state');\r\n\r\n            // Should clear out changes / restore previous state\r\n            if (restoreState) {\r\n                var restoreStateObj = JSON.parse(restoreState);\r\n                var originalStateCode = restoreStateObj.shippingAddress.stateCode;\r\n                var stateCode = $('[name$=_stateCode]', form).val();\r\n\r\n                updateShippingAddressFormValues(restoreStateObj);\r\n\r\n                if (stateCode !== originalStateCode) {\r\n                    $('[data-action=save]', form).trigger('click');\r\n                } else {\r\n                    $(form).attr('data-address-mode', 'edit');\r\n                    editMultiShipAddress($rootEl);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        });\r\n    },\r\n\r\n    isGift: function () {\r\n        $('.gift').on('change', function (e) {\r\n            e.preventDefault();\r\n            var form = $(this).closest('form');\r\n\r\n            if (this.checked) {\r\n                $(form).find('.gift-message').removeClass('d-none');\r\n            } else {\r\n                $(form).find('.gift-message').addClass('d-none');\r\n                $(form).find('.gift-message').val('');\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * updates the totals summary\r\n * @param {Array} totals - the totals data\r\n */\r\nfunction updateTotals(totals) {\r\n    $('.shipping-total-cost').text(totals.totalShippingCost);\r\n    $('.tax-total').text(totals.totalTax);\r\n    $('.sub-total').text(totals.subTotal);\r\n    $('.grand-total-sum').text(totals.grandTotal);\r\n\r\n    if (totals.orderLevelDiscountTotal.value > 0) {\r\n        $('.order-discount').show();\r\n        $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.order-discount').hide();\r\n    }\r\n\r\n    if (totals.shippingLevelDiscountTotal.value > 0) {\r\n        $('.shipping-discount').show();\r\n        $('.shipping-discount-total').text('- ' +\r\n            totals.shippingLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.shipping-discount').hide();\r\n    }\r\n}\r\n\r\n/**\r\n * updates the order product shipping summary for an order model\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateOrderProductSummaryInformation(order) {\r\n    var $productSummary = $('<div />');\r\n    order.shipping.forEach(function (shipping) {\r\n        shipping.productLineItems.items.forEach(function (lineItem) {\r\n            var pli = $('[data-product-line-item=' + lineItem.UUID + ']');\r\n            $productSummary.append(pli);\r\n        });\r\n\r\n        var address = shipping.shippingAddress || {};\r\n        var selectedMethod = shipping.selectedShippingMethod;\r\n\r\n        var nameLine = address.firstName ? address.firstName + ' ' : '';\r\n        if (address.lastName) nameLine += address.lastName;\r\n\r\n        var address1Line = address.address1;\r\n        var address2Line = address.address2;\r\n\r\n        var phoneLine = address.phone;\r\n\r\n        var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\r\n        var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\r\n        var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\r\n            ? '( ' + selectedMethod.estimatedArrivalTime + ' )'\r\n            : '';\r\n\r\n        var tmpl = $('#pli-shipping-summary-template').clone();\r\n\r\n        if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {\r\n            $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' '\r\n                + order.resources.items);\r\n        } else {\r\n            $('h5 > span').text('');\r\n        }\r\n\r\n        var stateRequiredAttr = $('#shippingState').attr('required');\r\n        var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;\r\n        var stateExists = (shipping.shippingAddress && shipping.shippingAddress.stateCode)\r\n            ? shipping.shippingAddress.stateCode\r\n            : false;\r\n        var stateBoolean = false;\r\n        if ((isRequired && stateExists) || (!isRequired)) {\r\n            stateBoolean = true;\r\n        }\r\n\r\n        var shippingForm = $('.multi-shipping input[name=\"shipmentUUID\"][value=\"' + shipping.UUID + '\"]').parent();\r\n\r\n        if (shipping.shippingAddress\r\n            && shipping.shippingAddress.firstName\r\n            && shipping.shippingAddress.address1\r\n            && shipping.shippingAddress.city\r\n            && stateBoolean\r\n            && shipping.shippingAddress.countryCode\r\n            && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {\r\n            $('.ship-to-name', tmpl).text(nameLine);\r\n            $('.ship-to-address1', tmpl).text(address1Line);\r\n            $('.ship-to-address2', tmpl).text(address2Line);\r\n            $('.ship-to-city', tmpl).text(address.city);\r\n            if (address.stateCode) {\r\n                $('.ship-to-st', tmpl).text(address.stateCode);\r\n            }\r\n            $('.ship-to-zip', tmpl).text(address.postalCode);\r\n            $('.ship-to-phone', tmpl).text(phoneLine);\r\n\r\n            if (!address2Line) {\r\n                $('.ship-to-address2', tmpl).hide();\r\n            }\r\n\r\n            if (!phoneLine) {\r\n                $('.ship-to-phone', tmpl).hide();\r\n            }\r\n\r\n            shippingForm.find('.ship-to-message').text('');\r\n        } else {\r\n            shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);\r\n        }\r\n\r\n        if (shipping.isGift) {\r\n            $('.gift-message-summary', tmpl).text(shipping.giftMessage);\r\n        } else {\r\n            $('.gift-summary', tmpl).addClass('d-none');\r\n        }\r\n\r\n        // checking h5 title shipping to or pickup\r\n        var $shippingAddressLabel = $('.shipping-header-text', tmpl);\r\n        $('body').trigger('shipping:updateAddressLabelText',\r\n            { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n\r\n        if (shipping.selectedShippingMethod) {\r\n            $('.display-name', tmpl).text(methodNameLine);\r\n            $('.arrival-time', tmpl).text(methodArrivalTime);\r\n            $('.price', tmpl).text(shippingCost);\r\n        }\r\n\r\n        var $shippingSummary = $('<div class=\"multi-shipping\" data-shipment-summary=\"'\r\n            + shipping.UUID + '\" />');\r\n        $shippingSummary.html(tmpl.html());\r\n        $productSummary.append($shippingSummary);\r\n    });\r\n\r\n    $('.product-summary-block').html($productSummary.html());\r\n}\r\n\r\nmodule.exports = {\r\n    updateTotals: updateTotals,\r\n    updateOrderProductSummaryInformation: updateOrderProductSummaryInformation\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar Cleave = __webpack_require__(/*! cleave.js */ \"./node_modules/cleave.js/dist/cleave.js\");\r\n\r\nmodule.exports = {\r\n    handleCreditCardNumber: function (cardFieldSelector, cardTypeSelector) {\r\n        var cleave = new Cleave(cardFieldSelector, {\r\n            creditCard: true,\r\n            onCreditCardTypeChanged: function (type) {\r\n                var creditCardTypes = {\r\n                    visa: 'Visa',\r\n                    mastercard: 'Master Card',\r\n                    amex: 'Amex',\r\n                    discover: 'Discover',\r\n                    unknown: 'Unknown'\r\n                };\r\n\r\n                var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1\r\n                    ? type\r\n                    : 'unknown'];\r\n                $(cardTypeSelector).val(cardType);\r\n                $('.card-number-wrapper').attr('data-type', type);\r\n                if (type === 'visa' || type === 'mastercard' || type === 'discover') {\r\n                    $('#securityCode').attr('maxlength', 3);\r\n                } else {\r\n                    $('#securityCode').attr('maxlength', 4);\r\n                }\r\n            }\r\n        });\r\n\r\n        $(cardFieldSelector).data('cleave', cleave);\r\n    },\r\n\r\n    serializeData: function (form) {\r\n        var serializedArray = form.serializeArray();\r\n\r\n        serializedArray.forEach(function (item) {\r\n            if (item.name.indexOf('cardNumber') > -1) {\r\n                item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\r\n            }\r\n        });\r\n\r\n        return $.param(serializedArray);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js?");

/***/ }),

/***/ "./node_modules/cleave.js/dist/cleave.js":
/*!***********************************************!*\
  !*** ./node_modules/cleave.js/dist/cleave.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n\t/**\n\t * Construct a new Cleave instance by passing the configuration object\n\t *\n\t * @param {String | HTMLElement} element\n\t * @param {Object} opts\n\t */\n\tvar Cleave = function (element, opts) {\n\t    var owner = this;\n\n\t    if (typeof element === 'string') {\n\t        owner.element = document.querySelector(element);\n\t    } else {\n\t        owner.element = ((typeof element.length !== 'undefined') && element.length > 0) ? element[0] : element;\n\t    }\n\n\t    if (!owner.element) {\n\t        throw new Error('[cleave.js] Please check the element');\n\t    }\n\n\t    opts.initValue = owner.element.value;\n\n\t    owner.properties = Cleave.DefaultProperties.assign({}, opts);\n\n\t    owner.init();\n\t};\n\n\tCleave.prototype = {\n\t    init: function () {\n\t        var owner = this, pps = owner.properties;\n\n\t        // no need to use this lib\n\t        if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {\n\t            owner.onInput(pps.initValue);\n\n\t            return;\n\t        }\n\n\t        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n\n\t        owner.isAndroid = Cleave.Util.isAndroid();\n\t        owner.lastInputValue = '';\n\n\t        owner.onChangeListener = owner.onChange.bind(owner);\n\t        owner.onKeyDownListener = owner.onKeyDown.bind(owner);\n\t        owner.onFocusListener = owner.onFocus.bind(owner);\n\t        owner.onCutListener = owner.onCut.bind(owner);\n\t        owner.onCopyListener = owner.onCopy.bind(owner);\n\n\t        owner.element.addEventListener('input', owner.onChangeListener);\n\t        owner.element.addEventListener('keydown', owner.onKeyDownListener);\n\t        owner.element.addEventListener('focus', owner.onFocusListener);\n\t        owner.element.addEventListener('cut', owner.onCutListener);\n\t        owner.element.addEventListener('copy', owner.onCopyListener);\n\n\n\t        owner.initPhoneFormatter();\n\t        owner.initDateFormatter();\n\t        owner.initTimeFormatter();\n\t        owner.initNumeralFormatter();\n\n\t        // avoid touch input field if value is null\n\t        // otherwise Firefox will add red box-shadow for <input required />\n\t        if (pps.initValue || (pps.prefix && !pps.noImmediatePrefix)) {\n\t            owner.onInput(pps.initValue);\n\t        }\n\t    },\n\n\t    initNumeralFormatter: function () {\n\t        var owner = this, pps = owner.properties;\n\n\t        if (!pps.numeral) {\n\t            return;\n\t        }\n\n\t        pps.numeralFormatter = new Cleave.NumeralFormatter(\n\t            pps.numeralDecimalMark,\n\t            pps.numeralIntegerScale,\n\t            pps.numeralDecimalScale,\n\t            pps.numeralThousandsGroupStyle,\n\t            pps.numeralPositiveOnly,\n\t            pps.stripLeadingZeroes,\n\t            pps.delimiter\n\t        );\n\t    },\n\n\t    initTimeFormatter: function() {\n\t        var owner = this, pps = owner.properties;\n\n\t        if (!pps.time) {\n\t            return;\n\t        }\n\n\t        pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern);\n\t        pps.blocks = pps.timeFormatter.getBlocks();\n\t        pps.blocksLength = pps.blocks.length;\n\t        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n\t    },\n\n\t    initDateFormatter: function () {\n\t        var owner = this, pps = owner.properties;\n\n\t        if (!pps.date) {\n\t            return;\n\t        }\n\n\t        pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern);\n\t        pps.blocks = pps.dateFormatter.getBlocks();\n\t        pps.blocksLength = pps.blocks.length;\n\t        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n\t    },\n\n\t    initPhoneFormatter: function () {\n\t        var owner = this, pps = owner.properties;\n\n\t        if (!pps.phone) {\n\t            return;\n\t        }\n\n\t        // Cleave.AsYouTypeFormatter should be provided by\n\t        // external google closure lib\n\t        try {\n\t            pps.phoneFormatter = new Cleave.PhoneFormatter(\n\t                new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),\n\t                pps.delimiter\n\t            );\n\t        } catch (ex) {\n\t            throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');\n\t        }\n\t    },\n\n\t    onKeyDown: function (event) {\n\t        var owner = this, pps = owner.properties,\n\t            charCode = event.which || event.keyCode,\n\t            Util = Cleave.Util,\n\t            currentValue = owner.element.value;\n\n\t        if (Util.isAndroidBackspaceKeydown(owner.lastInputValue, currentValue)) {\n\t            charCode = 8;\n\t        }\n\n\t        owner.lastInputValue = currentValue;\n\n\t        // hit backspace when last character is delimiter\n\t        if (charCode === 8 && Util.isDelimiter(currentValue.slice(-pps.delimiterLength), pps.delimiter, pps.delimiters)) {\n\t            pps.backspace = true;\n\n\t            return;\n\t        }\n\n\t        pps.backspace = false;\n\t    },\n\n\t    onChange: function () {\n\t        this.onInput(this.element.value);\n\t    },\n\n\t    onFocus: function () {\n\t        var owner = this,\n\t            pps = owner.properties;\n\n\t        Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n\t    },\n\n\t    onCut: function (e) {\n\t        this.copyClipboardData(e);\n\t        this.onInput('');\n\t    },\n\n\t    onCopy: function (e) {\n\t        this.copyClipboardData(e);\n\t    },\n\n\t    copyClipboardData: function (e) {\n\t        var owner = this,\n\t            pps = owner.properties,\n\t            Util = Cleave.Util,\n\t            inputValue = owner.element.value,\n\t            textToCopy = '';\n\n\t        if (!pps.copyDelimiter) {\n\t            textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);\n\t        } else {\n\t            textToCopy = inputValue;\n\t        }\n\n\t        try {\n\t            if (e.clipboardData) {\n\t                e.clipboardData.setData('Text', textToCopy);\n\t            } else {\n\t                window.clipboardData.setData('Text', textToCopy);\n\t            }\n\n\t            e.preventDefault();\n\t        } catch (ex) {\n\t            //  empty\n\t        }\n\t    },\n\n\t    onInput: function (value) {\n\t        var owner = this, pps = owner.properties,\n\t            Util = Cleave.Util;\n\n\t        // case 1: delete one more character \"4\"\n\t        // 1234*| -> hit backspace -> 123|\n\t        // case 2: last character is not delimiter which is:\n\t        // 12|34* -> hit backspace -> 1|34*\n\t        // note: no need to apply this for numeral mode\n\t        if (!pps.numeral && pps.backspace && !Util.isDelimiter(value.slice(-pps.delimiterLength), pps.delimiter, pps.delimiters)) {\n\t            value = Util.headStr(value, value.length - pps.delimiterLength);\n\t        }\n\n\t        // phone formatter\n\t        if (pps.phone) {\n\t            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n\t                pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n\t            } else {\n\t                pps.result = pps.phoneFormatter.format(value);\n\t            }\n\t            owner.updateValueState();\n\n\t            return;\n\t        }\n\n\t        // numeral formatter\n\t        if (pps.numeral) {\n\t            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n\t                pps.result = pps.prefix + pps.numeralFormatter.format(value);\n\t            } else {\n\t                pps.result = pps.numeralFormatter.format(value);\n\t            }\n\t            owner.updateValueState();\n\n\t            return;\n\t        }\n\n\t        // date\n\t        if (pps.date) {\n\t            value = pps.dateFormatter.getValidatedDate(value);\n\t        }\n\n\t        // time\n\t        if (pps.time) {\n\t            value = pps.timeFormatter.getValidatedTime(value);\n\t        }\n\n\t        // strip delimiters\n\t        value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);\n\n\t        // strip prefix\n\t        value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result);\n\n\t        // strip non-numeric characters\n\t        value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value;\n\n\t        // convert case\n\t        value = pps.uppercase ? value.toUpperCase() : value;\n\t        value = pps.lowercase ? value.toLowerCase() : value;\n\n\t        // prefix\n\t        if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n\t            value = pps.prefix + value;\n\n\t            // no blocks specified, no need to do formatting\n\t            if (pps.blocksLength === 0) {\n\t                pps.result = value;\n\t                owner.updateValueState();\n\n\t                return;\n\t            }\n\t        }\n\n\t        // update credit card props\n\t        if (pps.creditCard) {\n\t            owner.updateCreditCardPropsByValue(value);\n\t        }\n\n\t        // strip over length characters\n\t        value = Util.headStr(value, pps.maxLength);\n\n\t        // apply blocks\n\t        pps.result = Util.getFormattedValue(\n\t            value,\n\t            pps.blocks, pps.blocksLength,\n\t            pps.delimiter, pps.delimiters, pps.delimiterLazyShow\n\t        );\n\n\t        owner.updateValueState();\n\t    },\n\n\t    updateCreditCardPropsByValue: function (value) {\n\t        var owner = this, pps = owner.properties,\n\t            Util = Cleave.Util,\n\t            creditCardInfo;\n\n\t        // At least one of the first 4 characters has changed\n\t        if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n\t            return;\n\t        }\n\n\t        creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n\n\t        pps.blocks = creditCardInfo.blocks;\n\t        pps.blocksLength = pps.blocks.length;\n\t        pps.maxLength = Util.getMaxLength(pps.blocks);\n\n\t        // credit card type changed\n\t        if (pps.creditCardType !== creditCardInfo.type) {\n\t            pps.creditCardType = creditCardInfo.type;\n\n\t            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n\t        }\n\t    },\n\n\t    updateValueState: function () {\n\t        var owner = this,\n\t            Util = Cleave.Util,\n\t            pps = owner.properties;\n\n\t        if (!owner.element) {\n\t            return;\n\t        }\n\n\t        var endPos = owner.element.selectionEnd;\n\t        var oldValue = owner.element.value;\n\t        var newValue = pps.result;\n\n\t        endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);\n\n\t        // fix Android browser type=\"text\" input field\n\t        // cursor not jumping issue\n\t        if (owner.isAndroid) {\n\t            window.setTimeout(function () {\n\t                owner.element.value = newValue;\n\t                Util.setSelection(owner.element, endPos, pps.document, false);\n\t                owner.callOnValueChanged();\n\t            }, 1);\n\n\t            return;\n\t        }\n\n\t        owner.element.value = newValue;\n\t        Util.setSelection(owner.element, endPos, pps.document, false);\n\t        owner.callOnValueChanged();\n\t    },\n\n\t    callOnValueChanged: function () {\n\t        var owner = this,\n\t            pps = owner.properties;\n\n\t        pps.onValueChanged.call(owner, {\n\t            target: {\n\t                value: pps.result,\n\t                rawValue: owner.getRawValue()\n\t            }\n\t        });\n\t    },\n\n\t    setPhoneRegionCode: function (phoneRegionCode) {\n\t        var owner = this, pps = owner.properties;\n\n\t        pps.phoneRegionCode = phoneRegionCode;\n\t        owner.initPhoneFormatter();\n\t        owner.onChange();\n\t    },\n\n\t    setRawValue: function (value) {\n\t        var owner = this, pps = owner.properties;\n\n\t        value = value !== undefined && value !== null ? value.toString() : '';\n\n\t        if (pps.numeral) {\n\t            value = value.replace('.', pps.numeralDecimalMark);\n\t        }\n\n\t        pps.backspace = false;\n\n\t        owner.element.value = value;\n\t        owner.onInput(value);\n\t    },\n\n\t    getRawValue: function () {\n\t        var owner = this,\n\t            pps = owner.properties,\n\t            Util = Cleave.Util,\n\t            rawValue = owner.element.value;\n\n\t        if (pps.rawValueTrimPrefix) {\n\t            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result);\n\t        }\n\n\t        if (pps.numeral) {\n\t            rawValue = pps.numeralFormatter.getRawValue(rawValue);\n\t        } else {\n\t            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n\t        }\n\n\t        return rawValue;\n\t    },\n\n\t    getISOFormatDate: function () {\n\t        var owner = this,\n\t            pps = owner.properties;\n\n\t        return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n\t    },\n\n\t    getFormattedValue: function () {\n\t        return this.element.value;\n\t    },\n\n\t    destroy: function () {\n\t        var owner = this;\n\n\t        owner.element.removeEventListener('input', owner.onChangeListener);\n\t        owner.element.removeEventListener('keydown', owner.onKeyDownListener);\n\t        owner.element.removeEventListener('focus', owner.onFocusListener);\n\t        owner.element.removeEventListener('cut', owner.onCutListener);\n\t        owner.element.removeEventListener('copy', owner.onCopyListener);\n\t    },\n\n\t    toString: function () {\n\t        return '[Cleave Object]';\n\t    }\n\t};\n\n\tCleave.NumeralFormatter = __webpack_require__(1);\n\tCleave.DateFormatter = __webpack_require__(2);\n\tCleave.TimeFormatter = __webpack_require__(3);\n\tCleave.PhoneFormatter = __webpack_require__(4);\n\tCleave.CreditCardDetector = __webpack_require__(5);\n\tCleave.Util = __webpack_require__(6);\n\tCleave.DefaultProperties = __webpack_require__(7);\n\n\t// for angular directive\n\t((typeof global === 'object' && global) ? global : window)['Cleave'] = Cleave;\n\n\t// CommonJS\n\tmodule.exports = Cleave;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar NumeralFormatter = function (numeralDecimalMark,\n\t                                 numeralIntegerScale,\n\t                                 numeralDecimalScale,\n\t                                 numeralThousandsGroupStyle,\n\t                                 numeralPositiveOnly,\n\t                                 stripLeadingZeroes,\n\t                                 delimiter) {\n\t    var owner = this;\n\n\t    owner.numeralDecimalMark = numeralDecimalMark || '.';\n\t    owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n\t    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n\t    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n\t    owner.numeralPositiveOnly = !!numeralPositiveOnly;\n\t    owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n\t    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';\n\t    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n\t};\n\n\tNumeralFormatter.groupStyle = {\n\t    thousand: 'thousand',\n\t    lakh:     'lakh',\n\t    wan:      'wan',\n\t    none:     'none'    \n\t};\n\n\tNumeralFormatter.prototype = {\n\t    getRawValue: function (value) {\n\t        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n\t    },\n\n\t    format: function (value) {\n\t        var owner = this, parts, partInteger, partDecimal = '';\n\n\t        // strip alphabet letters\n\t        value = value.replace(/[A-Za-z]/g, '')\n\t            // replace the first decimal mark with reserved placeholder\n\t            .replace(owner.numeralDecimalMark, 'M')\n\n\t            // strip non numeric letters except minus and \"M\"\n\t            // this is to ensure prefix has been stripped\n\t            .replace(/[^\\dM-]/g, '')\n\n\t            // replace the leading minus with reserved placeholder\n\t            .replace(/^\\-/, 'N')\n\n\t            // strip the other minus sign (if present)\n\t            .replace(/\\-/g, '')\n\n\t            // replace the minus sign (if present)\n\t            .replace('N', owner.numeralPositiveOnly ? '' : '-')\n\n\t            // replace decimal mark\n\t            .replace('M', owner.numeralDecimalMark);\n\n\t        // strip any leading zeros\n\t        if (owner.stripLeadingZeroes) {\n\t            value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n\t        }\n\n\t        partInteger = value;\n\n\t        if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n\t            parts = value.split(owner.numeralDecimalMark);\n\t            partInteger = parts[0];\n\t            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n\t        }\n\n\t        if (owner.numeralIntegerScale > 0) {\n\t          partInteger = partInteger.slice(0, owner.numeralIntegerScale + (value.slice(0, 1) === '-' ? 1 : 0));\n\t        }\n\n\t        switch (owner.numeralThousandsGroupStyle) {\n\t        case NumeralFormatter.groupStyle.lakh:\n\t            partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n\n\t            break;\n\n\t        case NumeralFormatter.groupStyle.wan:\n\t            partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n\n\t            break;\n\n\t        case NumeralFormatter.groupStyle.thousand:\n\t            partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n\n\t            break;\n\t        }\n\n\t        return partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n\t    }\n\t};\n\n\tmodule.exports = NumeralFormatter;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar DateFormatter = function (datePattern) {\n\t    var owner = this;\n\n\t    owner.date = [];\n\t    owner.blocks = [];\n\t    owner.datePattern = datePattern;\n\t    owner.initBlocks();\n\t};\n\n\tDateFormatter.prototype = {\n\t    initBlocks: function () {\n\t        var owner = this;\n\t        owner.datePattern.forEach(function (value) {\n\t            if (value === 'Y') {\n\t                owner.blocks.push(4);\n\t            } else {\n\t                owner.blocks.push(2);\n\t            }\n\t        });\n\t    },\n\n\t    getISOFormatDate: function () {\n\t        var owner = this,\n\t            date = owner.date;\n\n\t        return date[2] ? (\n\t            date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0])\n\t        ) : '';\n\t    },\n\n\t    getBlocks: function () {\n\t        return this.blocks;\n\t    },\n\n\t    getValidatedDate: function (value) {\n\t        var owner = this, result = '';\n\n\t        value = value.replace(/[^\\d]/g, '');\n\n\t        owner.blocks.forEach(function (length, index) {\n\t            if (value.length > 0) {\n\t                var sub = value.slice(0, length),\n\t                    sub0 = sub.slice(0, 1),\n\t                    rest = value.slice(length);\n\n\t                switch (owner.datePattern[index]) {\n\t                case 'd':\n\t                    if (sub === '00') {\n\t                        sub = '01';\n\t                    } else if (parseInt(sub0, 10) > 3) {\n\t                        sub = '0' + sub0;\n\t                    } else if (parseInt(sub, 10) > 31) {\n\t                        sub = '31';\n\t                    }\n\n\t                    break;\n\n\t                case 'm':\n\t                    if (sub === '00') {\n\t                        sub = '01';\n\t                    } else if (parseInt(sub0, 10) > 1) {\n\t                        sub = '0' + sub0;\n\t                    } else if (parseInt(sub, 10) > 12) {\n\t                        sub = '12';\n\t                    }\n\n\t                    break;\n\t                }\n\n\t                result += sub;\n\n\t                // update remaining string\n\t                value = rest;\n\t            }\n\t        });\n\n\t        return this.getFixedDateString(result);\n\t    },\n\n\t    getFixedDateString: function (value) {\n\t        var owner = this, datePattern = owner.datePattern, date = [],\n\t            dayIndex = 0, monthIndex = 0, yearIndex = 0,\n\t            dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0,\n\t            day, month, year, fullYearDone = false;\n\n\t        // mm-dd || dd-mm\n\t        if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n\t            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n\t            monthStartIndex = 2 - dayStartIndex;\n\t            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n\t            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n\n\t            date = this.getFixedDate(day, month, 0);\n\t        }\n\n\t        // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n\t        if (value.length === 8) {\n\t            datePattern.forEach(function (type, index) {\n\t                switch (type) {\n\t                case 'd':\n\t                    dayIndex = index;\n\t                    break;\n\t                case 'm':\n\t                    monthIndex = index;\n\t                    break;\n\t                default:\n\t                    yearIndex = index;\n\t                    break;\n\t                }\n\t            });\n\n\t            yearStartIndex = yearIndex * 2;\n\t            dayStartIndex = (dayIndex <= yearIndex) ? dayIndex * 2 : (dayIndex * 2 + 2);\n\t            monthStartIndex = (monthIndex <= yearIndex) ? monthIndex * 2 : (monthIndex * 2 + 2);\n\n\t            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n\t            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n\t            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n\n\t            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n\n\t            date = this.getFixedDate(day, month, year);\n\t        }\n\n\t        owner.date = date;\n\n\t        return date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n\t            switch (current) {\n\t            case 'd':\n\t                return previous + owner.addLeadingZero(date[0]);\n\t            case 'm':\n\t                return previous + owner.addLeadingZero(date[1]);\n\t            default:\n\t                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2]) : '');\n\t            }\n\t        }, '');\n\t    },\n\n\t    getFixedDate: function (day, month, year) {\n\t        day = Math.min(day, 31);\n\t        month = Math.min(month, 12);\n\t        year = parseInt((year || 0), 10);\n\n\t        if ((month < 7 && month % 2 === 0) || (month > 8 && month % 2 === 1)) {\n\t            day = Math.min(day, month === 2 ? (this.isLeapYear(year) ? 29 : 28) : 30);\n\t        }\n\n\t        return [day, month, year];\n\t    },\n\n\t    isLeapYear: function (year) {\n\t        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n\t    },\n\n\t    addLeadingZero: function (number) {\n\t        return (number < 10 ? '0' : '') + number;\n\t    },\n\n\t    addLeadingZeroForYear: function (number) {\n\t        return (number < 10 ? '000' : (number < 100 ? '00' : (number < 1000 ? '0' : ''))) + number;\n\t    }\n\t};\n\n\tmodule.exports = DateFormatter;\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar TimeFormatter = function (timePattern) {\n\t    var owner = this;\n\n\t    owner.time = [];\n\t    owner.blocks = [];\n\t    owner.timePattern = timePattern;\n\t    owner.initBlocks();\n\t};\n\n\tTimeFormatter.prototype = {\n\t    initBlocks: function () {\n\t        var owner = this;\n\t        owner.timePattern.forEach(function () {\n\t            owner.blocks.push(2);\n\t        });\n\t    },\n\n\t    getISOFormatTime: function () {\n\t        var owner = this,\n\t            time = owner.time;\n\n\t        return time[2] ? (\n\t            owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2])\n\t        ) : '';\n\t    },\n\n\t    getBlocks: function () {\n\t        return this.blocks;\n\t    },\n\n\t    getValidatedTime: function (value) {\n\t        var owner = this, result = '';\n\n\t        value = value.replace(/[^\\d]/g, '');\n\n\t        owner.blocks.forEach(function (length, index) {\n\t            if (value.length > 0) {\n\t                var sub = value.slice(0, length),\n\t                    sub0 = sub.slice(0, 1),\n\t                    rest = value.slice(length);\n\n\t                switch (owner.timePattern[index]) {\n\n\t                case 'h':\n\t                    if (parseInt(sub0, 10) > 2) {\n\t                        sub = '0' + sub0;\n\t                    } else if (parseInt(sub, 10) > 23) {\n\t                        sub = '23';\n\t                    }\n\n\t                    break;\n\n\t                case 'm':\n\t                case 's':\n\t                    if (parseInt(sub0, 10) > 5) {\n\t                        sub = '0' + sub0;\n\t                    } else if (parseInt(sub, 10) > 60) {\n\t                        sub = '60';\n\t                    }\n\t                    break;\n\t                }\n\n\t                result += sub;\n\n\t                // update remaining string\n\t                value = rest;\n\t            }\n\t        });\n\n\t        return this.getFixedTimeString(result);\n\t    },\n\n\t    getFixedTimeString: function (value) {\n\t        var owner = this, timePattern = owner.timePattern, time = [],\n\t            secondIndex = 0, minuteIndex = 0, hourIndex = 0,\n\t            secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0,\n\t            second, minute, hour;\n\n\t        if (value.length === 6) {\n\t            timePattern.forEach(function (type, index) {\n\t                switch (type) {\n\t                case 's':\n\t                    secondIndex = index * 2;\n\t                    break;\n\t                case 'm':\n\t                    minuteIndex = index * 2;\n\t                    break;\n\t                case 'h':\n\t                    hourIndex = index * 2;\n\t                    break;\n\t                }\n\t            });\n\n\t            hourStartIndex = hourIndex;\n\t            minuteStartIndex = minuteIndex;\n\t            secondStartIndex = secondIndex;\n\n\t            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n\t            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n\t            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n\t            time = this.getFixedTime(hour, minute, second);\n\t        }\n\n\t        if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n\t            timePattern.forEach(function (type, index) {\n\t                switch (type) {\n\t                case 'm':\n\t                    minuteIndex = index * 2;\n\t                    break;\n\t                case 'h':\n\t                    hourIndex = index * 2;\n\t                    break;\n\t                }\n\t            });\n\n\t            hourStartIndex = hourIndex;\n\t            minuteStartIndex = minuteIndex;\n\n\t            second = 0;\n\t            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n\t            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n\t            time = this.getFixedTime(hour, minute, second);\n\t        }\n\n\t        owner.time = time;\n\n\t        return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n\t            switch (current) {\n\t            case 's':\n\t                return previous + owner.addLeadingZero(time[2]);\n\t            case 'm':\n\t                return previous + owner.addLeadingZero(time[1]);\n\t            case 'h':\n\t                return previous + owner.addLeadingZero(time[0]);\n\t            }\n\t        }, '');\n\t    },\n\n\t    getFixedTime: function (hour, minute, second) {\n\t        second = Math.min(parseInt(second || 0, 10), 60);\n\t        minute = Math.min(minute, 60);\n\t        hour = Math.min(hour, 60);\n\n\t        return [hour, minute, second];\n\t    },\n\n\t    addLeadingZero: function (number) {\n\t        return (number < 10 ? '0' : '') + number;\n\t    }\n\t};\n\n\tmodule.exports = TimeFormatter;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar PhoneFormatter = function (formatter, delimiter) {\n\t    var owner = this;\n\n\t    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';\n\t    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n\n\t    owner.formatter = formatter;\n\t};\n\n\tPhoneFormatter.prototype = {\n\t    setFormatter: function (formatter) {\n\t        this.formatter = formatter;\n\t    },\n\n\t    format: function (phoneNumber) {\n\t        var owner = this;\n\n\t        owner.formatter.clear();\n\n\t        // only keep number and +\n\t        phoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\n\n\t        // strip non-leading +\n\t        phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+');\n\n\t        // strip delimiter\n\t        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n\n\t        var result = '', current, validated = false;\n\n\t        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n\t            current = owner.formatter.inputDigit(phoneNumber.charAt(i));\n\n\t            // has ()- or space inside\n\t            if (/[\\s()-]/g.test(current)) {\n\t                result = current;\n\n\t                validated = true;\n\t            } else {\n\t                if (!validated) {\n\t                    result = current;\n\t                }\n\t                // else: over length input\n\t                // it turns to invalid number again\n\t            }\n\t        }\n\n\t        // strip ()\n\t        // e.g. US: 7161234567 returns (716) 123-4567\n\t        result = result.replace(/[()]/g, '');\n\t        // replace library delimiter with user customized delimiter\n\t        result = result.replace(/[\\s-]/g, owner.delimiter);\n\n\t        return result;\n\t    }\n\t};\n\n\tmodule.exports = PhoneFormatter;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar CreditCardDetector = {\n\t    blocks: {\n\t        uatp:          [4, 5, 6],\n\t        amex:          [4, 6, 5],\n\t        diners:        [4, 6, 4],\n\t        discover:      [4, 4, 4, 4],\n\t        mastercard:    [4, 4, 4, 4],\n\t        dankort:       [4, 4, 4, 4],\n\t        instapayment:  [4, 4, 4, 4],\n\t        jcb15:         [4, 6, 5],\n\t        jcb:           [4, 4, 4, 4],\n\t        maestro:       [4, 4, 4, 4],\n\t        visa:          [4, 4, 4, 4],\n\t        mir:           [4, 4, 4, 4],\n\t        unionPay:      [4, 4, 4, 4],\n\t        general:       [4, 4, 4, 4],\n\t        generalStrict: [4, 4, 4, 7]\n\t    },\n\n\t    re: {\n\t        // starts with 1; 15 digits, not starts with 1800 (jcb card)\n\t        uatp: /^(?!1800)1\\d{0,14}/,\n\n\t        // starts with 34/37; 15 digits\n\t        amex: /^3[47]\\d{0,13}/,\n\n\t        // starts with 6011/65/644-649; 16 digits\n\t        discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n\n\t        // starts with 300-305/309 or 36/38/39; 14 digits\n\t        diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n\n\t        // starts with 51-55/2221–2720; 16 digits\n\t        mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n\n\t        // starts with 5019/4175/4571; 16 digits\n\t        dankort: /^(5019|4175|4571)\\d{0,12}/,\n\n\t        // starts with 637-639; 16 digits\n\t        instapayment: /^63[7-9]\\d{0,13}/,\n\n\t        // starts with 2131/1800; 15 digits\n\t        jcb15: /^(?:2131|1800)\\d{0,11}/,\n\n\t        // starts with 2131/1800/35; 16 digits\n\t        jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n\n\t        // starts with 50/56-58/6304/67; 16 digits\n\t        maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n\n\t        // starts with 22; 16 digits\n\t        mir: /^220[0-4]\\d{0,12}/,\n\n\t        // starts with 4; 16 digits\n\t        visa: /^4\\d{0,15}/,\n\n\t        // starts with 62; 16 digits\n\t        unionPay: /^62\\d{0,14}/\n\t    },\n\n\t    getInfo: function (value, strictMode) {\n\t        var blocks = CreditCardDetector.blocks,\n\t            re = CreditCardDetector.re;\n\n\t        // Some credit card can have up to 19 digits number.\n\t        // Set strictMode to true will remove the 16 max-length restrain,\n\t        // however, I never found any website validate card number like\n\t        // this, hence probably you don't want to enable this option.\n\t        strictMode = !!strictMode;\n\n\t        for (var key in re) {\n\t            if (re[key].test(value)) {\n\t                var block;\n\n\t                if (strictMode) {\n\t                    block = blocks.generalStrict;\n\t                } else {\n\t                    block = blocks[key];\n\t                }\n\n\t                return {\n\t                    type: key,\n\t                    blocks: block\n\t                };\n\t            }\n\t        }\n\n\t        return {\n\t            type:   'unknown',\n\t            blocks: strictMode ? blocks.generalStrict : blocks.general\n\t        };\n\t    }\n\t};\n\n\tmodule.exports = CreditCardDetector;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tvar Util = {\n\t    noop: function () {\n\t    },\n\n\t    strip: function (value, re) {\n\t        return value.replace(re, '');\n\t    },\n\n\t    isDelimiter: function (letter, delimiter, delimiters) {\n\t        // single delimiter\n\t        if (delimiters.length === 0) {\n\t            return letter === delimiter;\n\t        }\n\n\t        // multiple delimiters\n\t        return delimiters.some(function (current) {\n\t            if (letter === current) {\n\t                return true;\n\t            }\n\t        });\n\t    },\n\n\t    getDelimiterREByDelimiter: function (delimiter) {\n\t        return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n\t    },\n\n\t    getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n\t      // If cursor was at the end of value, just place it back.\n\t      // Because new value could contain additional chars.\n\t      if (oldValue.length === prevPos) {\n\t          return newValue.length;\n\t      }\n\n\t      return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter ,delimiters);\n\t    },\n\n\t    getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n\t        var oldRawValue, newRawValue, lengthOffset;\n\n\t        oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n\t        newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n\t        lengthOffset = oldRawValue.length - newRawValue.length;\n\n\t        return (lengthOffset !== 0) ? (lengthOffset / Math.abs(lengthOffset)) : 0;\n\t    },\n\n\t    stripDelimiters: function (value, delimiter, delimiters) {\n\t        var owner = this;\n\n\t        // single delimiter\n\t        if (delimiters.length === 0) {\n\t            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n\n\t            return value.replace(delimiterRE, '');\n\t        }\n\n\t        // multiple delimiters\n\t        delimiters.forEach(function (current) {\n\t            value = value.replace(owner.getDelimiterREByDelimiter(current), '');\n\t        });\n\n\t        return value;\n\t    },\n\n\t    headStr: function (str, length) {\n\t        return str.slice(0, length);\n\t    },\n\n\t    getMaxLength: function (blocks) {\n\t        return blocks.reduce(function (previous, current) {\n\t            return previous + current;\n\t        }, 0);\n\t    },\n\n\t    // strip value by prefix length\n\t    // for prefix: PRE\n\t    // (PRE123, 3) -> 123\n\t    // (PR123, 3) -> 23 this happens when user hits backspace in front of \"PRE\"\n\t    getPrefixStrippedValue: function (value, prefix, prefixLength, prevValue) {\n\t        if (value.slice(0, prefixLength) !== prefix) {\n\n\t            // Check whether if it is a deletion\n\t            if (value.length < prevValue.length) {\n\t                value = value.length > prefixLength ? prevValue : prefix;\n\t            } else {\n\t                var diffIndex = this.getFirstDiffIndex(prefix, value.slice(0, prefixLength));\n\t                value = prefix + value.slice(diffIndex, diffIndex + 1) + value.slice(prefixLength + 1);\n\t            }\n\t        }\n\n\t        return value.slice(prefixLength);\n\t    },\n\n\t    getFirstDiffIndex: function (prev, current) {\n\t        var index = 0;\n\n\t        while (prev.charAt(index) === current.charAt(index)) {\n\t            if (prev.charAt(index++) === '') {\n\t                return -1;\n\t            }\n\t        }\n\n\t        return index;\n\t    },\n\n\t    getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n\t        var result = '',\n\t            multipleDelimiters = delimiters.length > 0,\n\t            currentDelimiter;\n\n\t        // no options, normal input\n\t        if (blocksLength === 0) {\n\t            return value;\n\t        }\n\n\t        blocks.forEach(function (length, index) {\n\t            if (value.length > 0) {\n\t                var sub = value.slice(0, length),\n\t                    rest = value.slice(length);\n\n\t                if (multipleDelimiters) {\n\t                    currentDelimiter = delimiters[delimiterLazyShow ? (index - 1) : index] || currentDelimiter;\n\t                } else {\n\t                    currentDelimiter = delimiter;\n\t                }\n\n\t                if (delimiterLazyShow) {\n\t                    if (index > 0) {\n\t                        result += currentDelimiter;\n\t                    }\n\n\t                    result += sub;\n\t                } else {\n\t                    result += sub;\n\n\t                    if (sub.length === length && index < blocksLength - 1) {\n\t                        result += currentDelimiter;\n\t                    }\n\t                }\n\n\t                // update remaining string\n\t                value = rest;\n\t            }\n\t        });\n\n\t        return result;\n\t    },\n\n\t    // move cursor to the end\n\t    // the first time user focuses on an input with prefix\n\t    fixPrefixCursor: function (el, prefix, delimiter, delimiters) {\n\t        if (!el) {\n\t            return;\n\t        }\n\n\t        var val = el.value,\n\t            appendix = delimiter || (delimiters[0] || ' ');\n\n\t        if (!el.setSelectionRange || !prefix || (prefix.length + appendix.length) < val.length) {\n\t            return;\n\t        }\n\n\t        var len = val.length * 2;\n\n\t        // set timeout to avoid blink\n\t        setTimeout(function () {\n\t            el.setSelectionRange(len, len);\n\t        }, 1);\n\t    },\n\n\t    setSelection: function (element, position, doc) {\n\t        if (element !== doc.activeElement) {\n\t            return;\n\t        }\n\n\t        // cursor is already in the end\n\t        if (element && element.value.length <= position) {\n\t          return;\n\t        }\n\n\t        if (element.createTextRange) {\n\t            var range = element.createTextRange();\n\n\t            range.move('character', position);\n\t            range.select();\n\t        } else {\n\t            try {\n\t                element.setSelectionRange(position, position);\n\t            } catch (e) {\n\t                // eslint-disable-next-line\n\t                console.warn('The input element type does not support selection');\n\t            }\n\t        }\n\t    },\n\n\t    isAndroid: function () {\n\t        return navigator && /android/i.test(navigator.userAgent);\n\t    },\n\n\t    // On Android chrome, the keyup and keydown events\n\t    // always return key code 229 as a composition that\n\t    // buffers the user’s keystrokes\n\t    // see https://github.com/nosir/cleave.js/issues/147\n\t    isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {\n\t        if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n\t            return false;\n\t        }\n\n\t        return currentInputValue === lastInputValue.slice(0, -1);\n\t    }\n\t};\n\n\tmodule.exports = Util;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n\t/**\n\t * Props Assignment\n\t *\n\t * Separate this, so react module can share the usage\n\t */\n\tvar DefaultProperties = {\n\t    // Maybe change to object-assign\n\t    // for now just keep it as simple\n\t    assign: function (target, opts) {\n\t        target = target || {};\n\t        opts = opts || {};\n\n\t        // credit card\n\t        target.creditCard = !!opts.creditCard;\n\t        target.creditCardStrictMode = !!opts.creditCardStrictMode;\n\t        target.creditCardType = '';\n\t        target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || (function () {});\n\n\t        // phone\n\t        target.phone = !!opts.phone;\n\t        target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n\t        target.phoneFormatter = {};\n\n\t        // time\n\t        target.time = !!opts.time;\n\t        target.timePattern = opts.timePattern || ['h', 'm', 's'];\n\t        target.timeFormatter = {};\n\n\t        // date\n\t        target.date = !!opts.date;\n\t        target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n\t        target.dateFormatter = {};\n\n\t        // numeral\n\t        target.numeral = !!opts.numeral;\n\t        target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n\t        target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n\t        target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n\t        target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n\t        target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n\t        target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n\n\t        // others\n\t        target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n\n\t        target.uppercase = !!opts.uppercase;\n\t        target.lowercase = !!opts.lowercase;\n\n\t        target.prefix = (target.creditCard || target.date) ? '' : (opts.prefix || '');\n\t        target.noImmediatePrefix = !!opts.noImmediatePrefix;\n\t        target.prefixLength = target.prefix.length;\n\t        target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n\t        target.copyDelimiter = !!opts.copyDelimiter;\n\n\t        target.initValue = (opts.initValue !== undefined && opts.initValue !== null) ? opts.initValue.toString() : '';\n\n\t        target.delimiter =\n\t            (opts.delimiter || opts.delimiter === '') ? opts.delimiter :\n\t                (opts.date ? '/' :\n\t                    (opts.time ? ':' :\n\t                        (opts.numeral ? ',' :\n\t                            (opts.phone ? ' ' :\n\t                                ' '))));\n\t        target.delimiterLength = target.delimiter.length;\n\t        target.delimiterLazyShow = !!opts.delimiterLazyShow;\n\t        target.delimiters = opts.delimiters || [];\n\n\t        target.blocks = opts.blocks || [];\n\t        target.blocksLength = target.blocks.length;\n\n\t        target.root = (typeof global === 'object' && global) ? global : window;\n\t        target.document = opts.document || target.root.document;\n\n\t        target.maxLength = 0;\n\n\t        target.backspace = false;\n\t        target.result = '';\n\n\t        target.onValueChanged = opts.onValueChanged || (function () {});\n\n\t        return target;\n\t    }\n\t};\n\n\tmodule.exports = DefaultProperties;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ })\n/******/ ])\n});\n;\n\n//# sourceURL=webpack:///./node_modules/cleave.js/dist/cleave.js?");

/***/ })

/******/ });