/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_storefront_base/cartridge/client/default/js/components/miniCart.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/cart/cart.js":
/*!*********************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/cart/cart.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar base = __webpack_require__(/*! ../product/base */ \"./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js\");\r\n\r\n/**\r\n * appends params to a url\r\n * @param {string} url - Original url\r\n * @param {Object} params - Parameters to append\r\n * @returns {string} result url with appended parameters\r\n */\r\nfunction appendToUrl(url, params) {\r\n    var newUrl = url;\r\n    newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {\r\n        return key + '=' + encodeURIComponent(params[key]);\r\n    }).join('&');\r\n\r\n    return newUrl;\r\n}\r\n\r\n/**\r\n * Checks whether the basket is valid. if invalid displays error message and disables\r\n * checkout button\r\n * @param {Object} data - AJAX response from the server\r\n */\r\nfunction validateBasket(data) {\r\n    if (data.valid.error) {\r\n        if (data.valid.message) {\r\n            var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n                'fade show\" role=\"alert\">' +\r\n                '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n                '<span aria-hidden=\"true\">&times;</span>' +\r\n                '</button>' + data.valid.message + '</div>';\r\n\r\n            $('.cart-error').append(errorHtml);\r\n        } else {\r\n            $('.cart').empty().append('<div class=\"row\"> ' +\r\n                '<div class=\"col-12 text-center\"> ' +\r\n                '<h1>' + data.resources.emptyCartMsg + '</h1> ' +\r\n                '</div> ' +\r\n                '</div>'\r\n            );\r\n            $('.number-of-items').empty().append(data.resources.numberOfItems);\r\n            $('.minicart-quantity').empty().append(data.numItems);\r\n            $('.minicart .popover').empty();\r\n            $('.minicart .popover').removeClass('show');\r\n        }\r\n\r\n        $('.checkout-btn').addClass('disabled');\r\n    } else {\r\n        $('.checkout-btn').removeClass('disabled');\r\n    }\r\n}\r\n\r\n/**\r\n * re-renders the order totals and the number of items in the cart\r\n * @param {Object} data - AJAX response from the server\r\n */\r\nfunction updateCartTotals(data) {\r\n    $('.number-of-items').empty().append(data.resources.numberOfItems);\r\n    $('.shipping-cost').empty().append(data.totals.totalShippingCost);\r\n    $('.tax-total').empty().append(data.totals.totalTax);\r\n    $('.grand-total').empty().append(data.totals.grandTotal);\r\n    $('.sub-total').empty().append(data.totals.subTotal);\r\n    $('.minicart-quantity').empty().append(data.numItems);\r\n\r\n    if (data.totals.orderLevelDiscountTotal.value > 0) {\r\n        $('.order-discount').removeClass('hide-order-discount');\r\n        $('.order-discount-total').empty()\r\n            .append('- ' + data.totals.orderLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.order-discount').addClass('hide-order-discount');\r\n    }\r\n\r\n    if (data.totals.shippingLevelDiscountTotal.value > 0) {\r\n        $('.shipping-discount').removeClass('hide-shipping-discount');\r\n        $('.shipping-discount-total').empty().append('- ' +\r\n            data.totals.shippingLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.shipping-discount').addClass('hide-shipping-discount');\r\n    }\r\n\r\n    data.items.forEach(function (item) {\r\n        $('.item-' + item.UUID).empty().append(item.renderedPromotions);\r\n        $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);\r\n    });\r\n}\r\n\r\n/**\r\n * re-renders the order totals and the number of items in the cart\r\n * @param {Object} message - Error message to display\r\n */\r\nfunction createErrorNotification(message) {\r\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n        'fade show\" role=\"alert\">' +\r\n        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n        '<span aria-hidden=\"true\">&times;</span>' +\r\n        '</button>' + message + '</div>';\r\n\r\n    $('.cart-error').append(errorHtml);\r\n}\r\n\r\n/**\r\n * re-renders the approaching discount messages\r\n * @param {Object} approachingDiscounts - updated approaching discounts for the cart\r\n */\r\nfunction updateApproachingDiscounts(approachingDiscounts) {\r\n    var html = '';\r\n    $('.approaching-discounts').empty();\r\n    if (approachingDiscounts.length > 0) {\r\n        approachingDiscounts.forEach(function (item) {\r\n            html += '<div class=\"single-approaching-discount text-center\">'\r\n                + item.discountMsg + '</div>';\r\n        });\r\n    }\r\n    $('.approaching-discounts').append(html);\r\n}\r\n\r\n/**\r\n * Updates the availability of a product line item\r\n * @param {Object} data - AJAX response from the server\r\n * @param {string} uuid - The uuid of the product line item to update\r\n */\r\nfunction updateAvailability(data, uuid) {\r\n    var lineItem;\r\n    var messages = '';\r\n\r\n    for (var i = 0; i < data.items.length; i++) {\r\n        if (data.items[i].UUID === uuid) {\r\n            lineItem = data.items[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    $('.availability-' + lineItem.UUID).empty();\r\n\r\n    if (lineItem.availability) {\r\n        if (lineItem.availability.messages) {\r\n            lineItem.availability.messages.forEach(function (message) {\r\n                messages += '<p class=\"line-item-attributes\">' + message + '</p>';\r\n            });\r\n        }\r\n\r\n        if (lineItem.availability.inStockDate) {\r\n            messages += '<p class=\"line-item-attributes line-item-instock-date\">'\r\n                + lineItem.availability.inStockDate\r\n                + '</p>';\r\n        }\r\n    }\r\n\r\n    $('.availability-' + lineItem.UUID).html(messages);\r\n}\r\n\r\n/**\r\n * Finds an element in the array that matches search parameter\r\n * @param {array} array - array of items to search\r\n * @param {function} match - function that takes an element and returns a boolean indicating if the match is made\r\n * @returns {Object|null} - returns an element of the array that matched the query.\r\n */\r\nfunction findItem(array, match) {\r\n    for (var i = 0, l = array.length; i < l; i++) {\r\n        if (match.call(this, array[i])) {\r\n            return array[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Updates details of a product line item\r\n * @param {Object} data - AJAX response from the server\r\n * @param {string} uuid - The uuid of the product line item to update\r\n */\r\nfunction updateProductDetails(data, uuid) {\r\n    var lineItem = findItem(data.cartModel.items, function (item) {\r\n        return item.UUID === uuid;\r\n    });\r\n\r\n    if (lineItem.variationAttributes) {\r\n        var colorAttr = findItem(lineItem.variationAttributes, function (attr) {\r\n            return attr.attributeId === 'color';\r\n        });\r\n\r\n        if (colorAttr) {\r\n            var colorSelector = '.Color-' + uuid;\r\n            var newColor = 'Color: ' + colorAttr.displayValue;\r\n            $(colorSelector).text(newColor);\r\n        }\r\n\r\n        var sizeAttr = findItem(lineItem.variationAttributes, function (attr) {\r\n            return attr.attributeId === 'size';\r\n        });\r\n\r\n        if (sizeAttr) {\r\n            var sizeSelector = '.Size-' + uuid;\r\n            var newSize = 'Size: ' + sizeAttr.displayValue;\r\n            $(sizeSelector).text(newSize);\r\n        }\r\n\r\n        var imageSelector = '.card.product-info.uuid-' + uuid + ' .item-image > img';\r\n        $(imageSelector).attr('src', lineItem.images.small[0].url);\r\n        $(imageSelector).attr('alt', lineItem.images.small[0].alt);\r\n        $(imageSelector).attr('title', lineItem.images.small[0].title);\r\n    }\r\n\r\n    var qtySelector = '.quantity[data-uuid=\"' + uuid + '\"]';\r\n    $(qtySelector).val(lineItem.quantity);\r\n    $(qtySelector).data('pid', data.newProductId);\r\n\r\n    $('.remove-product[data-uuid=\"' + uuid + '\"]').data('pid', data.newProductId);\r\n\r\n    var priceSelector = '.line-item-price-' + uuid + ' .sales .value';\r\n    $(priceSelector).text(lineItem.price.sales.formatted);\r\n    $(priceSelector).attr('content', lineItem.price.sales.decimalPrice);\r\n\r\n    if (lineItem.price.list) {\r\n        var listPriceSelector = '.line-item-price-' + uuid + ' .list .value';\r\n        $(listPriceSelector).text(lineItem.price.list.formatted);\r\n        $(listPriceSelector).attr('content', lineItem.price.list.decimalPrice);\r\n    }\r\n}\r\n\r\n/**\r\n * Generates the modal window on the first call.\r\n *\r\n */\r\nfunction getModalHtmlElement() {\r\n    if ($('#editProductModal').length !== 0) {\r\n        $('#editProductModal').remove();\r\n    }\r\n    var htmlString = '<!-- Modal -->'\r\n        + '<div class=\"modal fade\" id=\"editProductModal\" role=\"dialog\">'\r\n        + '<div class=\"modal-dialog quick-view-dialog\">'\r\n        + '<!-- Modal content-->'\r\n        + '<div class=\"modal-content\">'\r\n        + '<div class=\"modal-header\">'\r\n        + '    <button type=\"button\" class=\"close pull-right\" data-dismiss=\"modal\">'\r\n        + '        &times;'\r\n        + '    </button>'\r\n        + '</div>'\r\n        + '<div class=\"modal-body\"></div>'\r\n        + '<div class=\"modal-footer\"></div>'\r\n        + '</div>'\r\n        + '</div>'\r\n        + '</div>';\r\n    $('body').append(htmlString);\r\n}\r\n\r\n/**\r\n * Parses the html for a modal window\r\n * @param {string} html - representing the body and footer of the modal window\r\n *\r\n * @return {Object} - Object with properties body and footer.\r\n */\r\nfunction parseHtml(html) {\r\n    var $html = $('<div>').append($.parseHTML(html));\r\n\r\n    var body = $html.find('.product-quickview');\r\n    var footer = $html.find('.modal-footer').children();\r\n\r\n    return { body: body, footer: footer };\r\n}\r\n\r\n/**\r\n * replaces the content in the modal window for product variation to be edited.\r\n * @param {string} editProductUrl - url to be used to retrieve a new product model\r\n */\r\nfunction fillModalElement(editProductUrl) {\r\n    $('.modal-body').spinner().start();\r\n    $.ajax({\r\n        url: editProductUrl,\r\n        method: 'GET',\r\n        dataType: 'html',\r\n        success: function (html) {\r\n            var parsedHtml = parseHtml(html);\r\n\r\n            $('#editProductModal .modal-body').empty();\r\n            $('#editProductModal .modal-body').html(parsedHtml.body);\r\n            $('#editProductModal .modal-footer').html(parsedHtml.footer);\r\n            $('#editProductModal').modal('show');\r\n            $.spinner().stop();\r\n        },\r\n        error: function () {\r\n            $.spinner().stop();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * replace content of modal\r\n * @param {string} actionUrl - url to be used to remove product\r\n * @param {string} productID - pid\r\n * @param {string} productName - product name\r\n * @param {string} uuid - uuid\r\n */\r\nfunction confirmDelete(actionUrl, productID, productName, uuid) {\r\n    var $deleteConfirmBtn = $('.cart-delete-confirmation-btn');\r\n    var $productToRemoveSpan = $('.product-to-remove');\r\n\r\n    $deleteConfirmBtn.data('pid', productID);\r\n    $deleteConfirmBtn.data('action', actionUrl);\r\n    $deleteConfirmBtn.data('uuid', uuid);\r\n\r\n    $productToRemoveSpan.empty().append(productName);\r\n}\r\n\r\nmodule.exports = function () {\r\n    $('body').on('click', '.remove-product', function (e) {\r\n        e.preventDefault();\r\n\r\n        var actionUrl = $(this).data('action');\r\n        var productID = $(this).data('pid');\r\n        var productName = $(this).data('name');\r\n        var uuid = $(this).data('uuid');\r\n        confirmDelete(actionUrl, productID, productName, uuid);\r\n    });\r\n\r\n    $('body').on('afterRemoveFromCart', function (e, data) {\r\n        e.preventDefault();\r\n        confirmDelete(data.actionUrl, data.productID, data.productName, data.uuid);\r\n    });\r\n\r\n    $('.optional-promo').click(function (e) {\r\n        e.preventDefault();\r\n        $('.promo-code-form').toggle();\r\n    });\r\n\r\n    $('body').on('click', '.cart-delete-confirmation-btn', function (e) {\r\n        e.preventDefault();\r\n\r\n        var productID = $(this).data('pid');\r\n        var url = $(this).data('action');\r\n        var uuid = $(this).data('uuid');\r\n        var urlParams = {\r\n            pid: productID,\r\n            uuid: uuid\r\n        };\r\n\r\n        url = appendToUrl(url, urlParams);\r\n\r\n        $('body > .modal-backdrop').remove();\r\n\r\n        $.spinner().start();\r\n        $.ajax({\r\n            url: url,\r\n            type: 'get',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                if (data.basket.items.length === 0) {\r\n                    $('.cart').empty().append('<div class=\"row\"> ' +\r\n                        '<div class=\"col-12 text-center\"> ' +\r\n                        '<h1>' + data.basket.resources.emptyCartMsg + '</h1> ' +\r\n                        '</div> ' +\r\n                        '</div>'\r\n                    );\r\n                    $('.number-of-items').empty().append(data.basket.resources.numberOfItems);\r\n                    $('.minicart-quantity').empty().append(data.basket.numItems);\r\n                    $('.minicart .popover').empty();\r\n                    $('.minicart .popover').removeClass('show');\r\n                    $('body').removeClass('modal-open');\r\n                    $('html').removeClass('veiled');\r\n                } else {\r\n                    if (data.toBeDeletedUUIDs && data.toBeDeletedUUIDs.length > 0) {\r\n                        for (var i = 0; i < data.toBeDeletedUUIDs.length; i++) {\r\n                            $('.uuid-' + data.toBeDeletedUUIDs[i]).remove();\r\n                        }\r\n                    }\r\n                    $('.uuid-' + uuid).remove();\r\n                    if (!data.basket.hasBonusProduct) {\r\n                        $('.bonus-product').remove();\r\n                    }\r\n                    $('.coupons-and-promos').empty().append(data.basket.totals.discountsHtml);\r\n                    updateCartTotals(data.basket);\r\n                    updateApproachingDiscounts(data.basket.approachingDiscounts);\r\n                    $('body').trigger('setShippingMethodSelection', data.basket);\r\n                    validateBasket(data.basket);\r\n                }\r\n                $.spinner().stop();\r\n            },\r\n            error: function (err) {\r\n                if (err.responseJSON.redirectUrl) {\r\n                    window.location.href = err.responseJSON.redirectUrl;\r\n                } else {\r\n                    createErrorNotification(err.responseJSON.errorMessage);\r\n                    $.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    $('body').on('change', '.quantity-form > .quantity', function () {\r\n        var preSelectQty = $(this).data('pre-select-qty');\r\n        var quantity = $(this).val();\r\n        var productID = $(this).data('pid');\r\n        var url = $(this).data('action');\r\n        var uuid = $(this).data('uuid');\r\n\r\n        var urlParams = {\r\n            pid: productID,\r\n            quantity: quantity,\r\n            uuid: uuid\r\n        };\r\n        url = appendToUrl(url, urlParams);\r\n\r\n        $(this).parents('.card').spinner().start();\r\n\r\n        $.ajax({\r\n            url: url,\r\n            type: 'get',\r\n            context: this,\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                $('.quantity[data-uuid=\"' + uuid + '\"]').val(quantity);\r\n                $('.coupons-and-promos').empty().append(data.totals.discountsHtml);\r\n                updateCartTotals(data);\r\n                updateApproachingDiscounts(data.approachingDiscounts);\r\n                updateAvailability(data, uuid);\r\n                validateBasket(data);\r\n                $(this).data('pre-select-qty', quantity);\r\n                $.spinner().stop();\r\n                if ($(this).parents('.product-info').hasClass('bonus-product-line-item') && $('.cart-page').length) {\r\n                    location.reload();\r\n                }\r\n            },\r\n            error: function (err) {\r\n                if (err.responseJSON.redirectUrl) {\r\n                    window.location.href = err.responseJSON.redirectUrl;\r\n                } else {\r\n                    createErrorNotification(err.responseJSON.errorMessage);\r\n                    $(this).val(parseInt(preSelectQty, 10));\r\n                    $.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    $('.shippingMethods').change(function () {\r\n        var url = $(this).attr('data-actionUrl');\r\n        var urlParams = {\r\n            methodID: $(this).find(':selected').attr('data-shipping-id')\r\n        };\r\n        // url = appendToUrl(url, urlParams);\r\n\r\n        $('.totals').spinner().start();\r\n        $.ajax({\r\n            url: url,\r\n            type: 'post',\r\n            dataType: 'json',\r\n            data: urlParams,\r\n            success: function (data) {\r\n                if (data.error) {\r\n                    window.location.href = data.redirectUrl;\r\n                } else {\r\n                    $('.coupons-and-promos').empty().append(data.totals.discountsHtml);\r\n                    updateCartTotals(data);\r\n                    updateApproachingDiscounts(data.approachingDiscounts);\r\n                    validateBasket(data);\r\n                }\r\n                $.spinner().stop();\r\n            },\r\n            error: function (err) {\r\n                if (err.redirectUrl) {\r\n                    window.location.href = err.redirectUrl;\r\n                } else {\r\n                    createErrorNotification(err.responseJSON.errorMessage);\r\n                    $.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    $('.promo-code-form').submit(function (e) {\r\n        e.preventDefault();\r\n        $.spinner().start();\r\n        $('.coupon-missing-error').hide();\r\n        $('.coupon-error-message').empty();\r\n        if (!$('.coupon-code-field').val()) {\r\n            $('.promo-code-form .form-control').addClass('is-invalid');\r\n            $('.coupon-missing-error').show();\r\n            $.spinner().stop();\r\n            return false;\r\n        }\r\n        var $form = $('.promo-code-form');\r\n        $('.promo-code-form .form-control').removeClass('is-invalid');\r\n        $('.coupon-error-message').empty();\r\n\r\n        $.ajax({\r\n            url: $form.attr('action'),\r\n            type: 'GET',\r\n            dataType: 'json',\r\n            data: $form.serialize(),\r\n            success: function (data) {\r\n                if (data.error) {\r\n                    $('.promo-code-form .form-control').addClass('is-invalid');\r\n                    $('.coupon-error-message').empty().append(data.errorMessage);\r\n                } else {\r\n                    $('.coupons-and-promos').empty().append(data.totals.discountsHtml);\r\n                    updateCartTotals(data);\r\n                    updateApproachingDiscounts(data.approachingDiscounts);\r\n                    validateBasket(data);\r\n                }\r\n                $('.coupon-code-field').val('');\r\n                $.spinner().stop();\r\n            },\r\n            error: function (err) {\r\n                if (err.responseJSON.redirectUrl) {\r\n                    window.location.href = err.responseJSON.redirectUrl;\r\n                } else {\r\n                    createErrorNotification(err.errorMessage);\r\n                    $.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n        return false;\r\n    });\r\n\r\n    $('body').on('click', '.remove-coupon', function (e) {\r\n        e.preventDefault();\r\n\r\n        var couponCode = $(this).data('code');\r\n        var uuid = $(this).data('uuid');\r\n        var $deleteConfirmBtn = $('.delete-coupon-confirmation-btn');\r\n        var $productToRemoveSpan = $('.coupon-to-remove');\r\n\r\n        $deleteConfirmBtn.data('uuid', uuid);\r\n        $deleteConfirmBtn.data('code', couponCode);\r\n\r\n        $productToRemoveSpan.empty().append(couponCode);\r\n    });\r\n\r\n    $('body').on('click', '.delete-coupon-confirmation-btn', function (e) {\r\n        e.preventDefault();\r\n\r\n        var url = $(this).data('action');\r\n        var uuid = $(this).data('uuid');\r\n        var couponCode = $(this).data('code');\r\n        var urlParams = {\r\n            code: couponCode,\r\n            uuid: uuid\r\n        };\r\n\r\n        url = appendToUrl(url, urlParams);\r\n\r\n        $('body > .modal-backdrop').remove();\r\n\r\n        $.spinner().start();\r\n        $.ajax({\r\n            url: url,\r\n            type: 'get',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                $('.coupon-uuid-' + uuid).remove();\r\n                updateCartTotals(data);\r\n                updateApproachingDiscounts(data.approachingDiscounts);\r\n                validateBasket(data);\r\n                $.spinner().stop();\r\n            },\r\n            error: function (err) {\r\n                if (err.responseJSON.redirectUrl) {\r\n                    window.location.href = err.responseJSON.redirectUrl;\r\n                } else {\r\n                    createErrorNotification(err.responseJSON.errorMessage);\r\n                    $.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    });\r\n    $('body').on('click', '.cart-page .bonus-product-button', function () {\r\n        $.spinner().start();\r\n        $.ajax({\r\n            url: $(this).data('url'),\r\n            method: 'GET',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                base.methods.editBonusProducts(data);\r\n                $.spinner().stop();\r\n            },\r\n            error: function () {\r\n                $.spinner().stop();\r\n            }\r\n        });\r\n    });\r\n    $('body').on('click', '.cart-page .product-edit .edit, .cart-page .bundle-edit .edit', function (e) {\r\n        e.preventDefault();\r\n\r\n        var editProductUrl = $(this).attr('href');\r\n        getModalHtmlElement();\r\n        fillModalElement(editProductUrl);\r\n    });\r\n\r\n    $('body').on('product:updateAddToCart', function (e, response) {\r\n        // update global add to cart (single products, bundles)\r\n        var dialog = $(response.$productContainer)\r\n            .closest('.quick-view-dialog');\r\n\r\n        $('.update-cart-product-global', dialog).attr('disabled',\r\n            !$('.global-availability', dialog).data('ready-to-order')\r\n            || !$('.global-availability', dialog).data('available')\r\n        );\r\n    });\r\n\r\n    $('body').on('product:updateAvailability', function (e, response) {\r\n        // bundle individual products\r\n        $('.product-availability', response.$productContainer)\r\n            .data('ready-to-order', response.product.readyToOrder)\r\n            .data('available', response.product.available)\r\n            .find('.availability-msg')\r\n            .empty()\r\n            .html(response.message);\r\n\r\n\r\n        var dialog = $(response.$productContainer)\r\n            .closest('.quick-view-dialog');\r\n\r\n        if ($('.product-availability', dialog).length) {\r\n            // bundle all products\r\n            var allAvailable = $('.product-availability', dialog).toArray()\r\n                .every(function (item) { return $(item).data('available'); });\r\n\r\n            var allReady = $('.product-availability', dialog).toArray()\r\n                .every(function (item) { return $(item).data('ready-to-order'); });\r\n\r\n            $('.global-availability', dialog)\r\n                .data('ready-to-order', allReady)\r\n                .data('available', allAvailable);\r\n\r\n            $('.global-availability .availability-msg', dialog).empty()\r\n                .html(allReady ? response.message : response.resources.info_selectforstock);\r\n        } else {\r\n            // single product\r\n            $('.global-availability', dialog)\r\n                .data('ready-to-order', response.product.readyToOrder)\r\n                .data('available', response.product.available)\r\n                .find('.availability-msg')\r\n                .empty()\r\n                .html(response.message);\r\n        }\r\n    });\r\n\r\n    $('body').on('product:afterAttributeSelect', function (e, response) {\r\n        if ($('.modal.show .product-quickview .bundle-items').length) {\r\n            $('.modal.show').find(response.container).data('pid', response.data.product.id);\r\n            $('.modal.show').find(response.container).find('.product-id').text(response.data.product.id);\r\n        } else {\r\n            $('.modal.show .product-quickview').data('pid', response.data.product.id);\r\n        }\r\n    });\r\n\r\n    $('body').on('change', '.quantity-select', function () {\r\n        var selectedQuantity = $(this).val();\r\n        $('.modal.show .update-cart-url').data('selected-quantity', selectedQuantity);\r\n    });\r\n\r\n    $('body').on('click', '.update-cart-product-global', function (e) {\r\n        e.preventDefault();\r\n\r\n        var updateProductUrl = $(this).closest('.cart-and-ipay').find('.update-cart-url').val();\r\n        var selectedQuantity = $(this).closest('.cart-and-ipay').find('.update-cart-url').data('selected-quantity');\r\n        var uuid = $(this).closest('.cart-and-ipay').find('.update-cart-url').data('uuid');\r\n\r\n        var form = {\r\n            uuid: uuid,\r\n            pid: base.getPidValue($(this)),\r\n            quantity: selectedQuantity\r\n        };\r\n\r\n        $(this).parents('.card').spinner().start();\r\n        if (updateProductUrl) {\r\n            $.ajax({\r\n                url: updateProductUrl,\r\n                type: 'post',\r\n                context: this,\r\n                data: form,\r\n                dataType: 'json',\r\n                success: function (data) {\r\n                    $('#editProductModal').remove();\r\n                    $('.modal-backdrop').remove();\r\n                    $('body').removeClass('modal-open');\r\n\r\n                    $('.coupons-and-promos').empty().append(data.cartModel.totals.discountsHtml);\r\n                    updateCartTotals(data.cartModel);\r\n                    updateApproachingDiscounts(data.cartModel.approachingDiscounts);\r\n                    updateAvailability(data.cartModel, uuid);\r\n                    updateProductDetails(data, uuid);\r\n\r\n                    if (data.uuidToBeDeleted) {\r\n                        $('.uuid-' + data.uuidToBeDeleted).remove();\r\n                    }\r\n\r\n                    validateBasket(data.cartModel);\r\n\r\n                    $.spinner().stop();\r\n                },\r\n                error: function (err) {\r\n                    if (err.responseJSON.redirectUrl) {\r\n                        window.location.href = err.responseJSON.redirectUrl;\r\n                    } else {\r\n                        createErrorNotification(err.responseJSON.errorMessage);\r\n                        $.spinner().stop();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n\r\n    base.selectAttribute();\r\n    base.colorAttribute();\r\n    base.removeBonusProduct();\r\n    base.selectBonusProduct();\r\n    base.enableBonusProductSelection();\r\n    base.showMoreBonusProducts();\r\n    base.addBonusProductsToCart();\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/cart/cart.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/components/miniCart.js":
/*!*******************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/components/miniCart.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar cart = __webpack_require__(/*! ../cart/cart */ \"./cartridges/app_storefront_base/cartridge/client/default/js/cart/cart.js\");\r\n\r\nmodule.exports = function () {\r\n    cart();\r\n\r\n    $('.minicart').on('count:update', function (event, count) {\r\n        if (count && $.isNumeric(count.quantityTotal)) {\r\n            $('.minicart .minicart-quantity').text(count.quantityTotal);\r\n        }\r\n    });\r\n\r\n    $('.minicart').on('mouseenter focusin touchstart', function () {\r\n        if ($('.search:visible').length === 0) {\r\n            return;\r\n        }\r\n        var url = $('.minicart').data('action-url');\r\n        var count = parseInt($('.minicart .minicart-quantity').text(), 10);\r\n\r\n        if (count !== 0 && $('.minicart .popover.show').length === 0) {\r\n            $('.minicart .popover').addClass('show');\r\n            $('.minicart .popover').spinner().start();\r\n            $.get(url, function (data) {\r\n                $('.minicart .popover').empty();\r\n                $('.minicart .popover').append(data);\r\n                $.spinner().stop();\r\n            });\r\n        }\r\n    });\r\n    $('body').on('touchstart click', function (e) {\r\n        if ($('.minicart').has(e.target).length <= 0) {\r\n            $('.minicart .popover').empty();\r\n            $('.minicart .popover').removeClass('show');\r\n        }\r\n    });\r\n    $('.minicart').on('mouseleave focusout', function (event) {\r\n        if ((event.type === 'focusout' && $('.minicart').has(event.target).length > 0)\r\n            || (event.type === 'mouseleave' && $(event.target).is('.minicart .quantity'))\r\n            || $('body').hasClass('modal-open')) {\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        $('.minicart .popover').empty();\r\n        $('.minicart .popover').removeClass('show');\r\n    });\r\n    $('body').on('change', '.minicart .quantity', function () {\r\n        if ($(this).parents('.bonus-product-line-item').length && $('.cart-page').length) {\r\n            location.reload();\r\n        }\r\n    });\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/components/miniCart.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js":
/*!************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * Retrieves the relevant pid value\r\n * @param {jquery} $el - DOM container for a given add to cart button\r\n * @return {string} - value to be used when adding product to cart\r\n */\r\nfunction getPidValue($el) {\r\n    var pid;\r\n\r\n    if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {\r\n        pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');\r\n    } else if ($('.product-set-detail').length || $('.product-set').length) {\r\n        pid = $($el).closest('.product-detail').find('.product-id').text();\r\n    } else {\r\n        pid = $('.product-detail:not(\".bundle-item\")').data('pid');\r\n    }\r\n\r\n    return pid;\r\n}\r\n\r\n/**\r\n * Retrieve contextual quantity selector\r\n * @param {jquery} $el - DOM container for the relevant quantity\r\n * @return {jquery} - quantity selector DOM container\r\n */\r\nfunction getQuantitySelector($el) {\r\n    return $el && $('.set-items').length\r\n        ? $($el).closest('.product-detail').find('.quantity-select')\r\n        : $('.quantity-select');\r\n}\r\n\r\n/**\r\n * Retrieves the value associated with the Quantity pull-down menu\r\n * @param {jquery} $el - DOM container for the relevant quantity\r\n * @return {string} - value found in the quantity input\r\n */\r\nfunction getQuantitySelected($el) {\r\n    return getQuantitySelector($el).val();\r\n}\r\n\r\n/**\r\n * Process the attribute values for an attribute that has image swatches\r\n *\r\n * @param {Object} attr - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {Object[]} attr.values - Array of attribute value objects\r\n * @param {string} attr.values.value - Attribute coded value\r\n * @param {string} attr.values.url - URL to de/select an attribute value of the product\r\n * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be\r\n *     selected.  If there is no variant that corresponds to a specific combination of attribute\r\n *     values, an attribute may be disabled in the Product Detail Page\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n */\r\nfunction processSwatchValues(attr, $productContainer) {\r\n    attr.values.forEach(function (attrValue) {\r\n        var $attrValue = $productContainer.find('[data-attr=\"' + attr.id + '\"] [data-attr-value=\"' +\r\n            attrValue.value + '\"]');\r\n        var $swatchAnchor = $attrValue.parent();\r\n\r\n        if (attrValue.selected) {\r\n            $attrValue.addClass('selected');\r\n        } else {\r\n            $attrValue.removeClass('selected');\r\n        }\r\n\r\n        if (attrValue.url) {\r\n            $swatchAnchor.attr('href', attrValue.url);\r\n        } else {\r\n            $swatchAnchor.removeAttr('href');\r\n        }\r\n\r\n        // Disable if not selectable\r\n        $attrValue.removeClass('selectable unselectable');\r\n\r\n        $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');\r\n    });\r\n}\r\n\r\n/**\r\n * Process attribute values associated with an attribute that does not have image swatches\r\n *\r\n * @param {Object} attr - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {Object[]} attr.values - Array of attribute value objects\r\n * @param {string} attr.values.value - Attribute coded value\r\n * @param {string} attr.values.url - URL to de/select an attribute value of the product\r\n * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be\r\n *     selected.  If there is no variant that corresponds to a specific combination of attribute\r\n *     values, an attribute may be disabled in the Product Detail Page\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n */\r\nfunction processNonSwatchValues(attr, $productContainer) {\r\n    var $attr = '[data-attr=\"' + attr.id + '\"]';\r\n    var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');\r\n    $defaultOption.attr('value', attr.resetUrl);\r\n\r\n    attr.values.forEach(function (attrValue) {\r\n        var $attrValue = $productContainer\r\n            .find($attr + ' [data-attr-value=\"' + attrValue.value + '\"]');\r\n        $attrValue.attr('value', attrValue.url)\r\n            .removeAttr('disabled');\r\n\r\n        if (!attrValue.selectable) {\r\n            $attrValue.attr('disabled', true);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Routes the handling of attribute processing depending on whether the attribute has image\r\n *     swatches or not\r\n *\r\n * @param {Object} attrs - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {jQuery} $productContainer - DOM element for a given product\r\n */\r\nfunction updateAttrs(attrs, $productContainer) {\r\n    // Currently, the only attribute type that has image swatches is Color.\r\n    var attrsWithSwatches = ['color'];\r\n\r\n    attrs.forEach(function (attr) {\r\n        if (attrsWithSwatches.indexOf(attr.id) > -1) {\r\n            processSwatchValues(attr, $productContainer);\r\n        } else {\r\n            processNonSwatchValues(attr, $productContainer);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the availability status in the Product Detail Page\r\n *\r\n * @param {Object} response - Ajax response object after an\r\n *                            attribute value has been [de]selected\r\n * @param {jQuery} $productContainer - DOM element for a given product\r\n */\r\nfunction updateAvailability(response, $productContainer) {\r\n    var availabilityValue = '';\r\n    var availabilityMessages = response.product.availability.messages;\r\n    if (!response.product.readyToOrder) {\r\n        availabilityValue = '<div>' + response.resources.info_selectforstock + '</div>';\r\n    } else {\r\n        availabilityMessages.forEach(function (message) {\r\n            availabilityValue += '<div>' + message + '</div>';\r\n        });\r\n    }\r\n\r\n    $($productContainer).trigger('product:updateAvailability', {\r\n        product: response.product,\r\n        $productContainer: $productContainer,\r\n        message: availabilityValue,\r\n        resources: response.resources\r\n    });\r\n}\r\n\r\n/**\r\n * Generates html for promotions section\r\n *\r\n * @param {array} promotions - list of promotions\r\n * @return {string} - Compiled HTML\r\n */\r\nfunction getPromotionsHtml(promotions) {\r\n    if (!promotions) {\r\n        return '';\r\n    }\r\n\r\n    var html = '';\r\n\r\n    promotions.forEach(function (promotion) {\r\n        html += '<div class=\"callout\" title=\"' + promotion.details + '\">' + promotion.calloutMsg +\r\n            '</div>';\r\n    });\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * Generates html for product attributes section\r\n *\r\n * @param {array} attributes - list of attributes\r\n * @return {string} - Compiled HTML\r\n */\r\nfunction getAttributesHtml(attributes) {\r\n    if (!attributes) {\r\n        return '';\r\n    }\r\n\r\n    var html = '';\r\n\r\n    attributes.forEach(function (attributeGroup) {\r\n        if (attributeGroup.ID === 'mainAttributes') {\r\n            attributeGroup.attributes.forEach(function (attribute) {\r\n                html += '<div class=\"attribute-values\">' + attribute.label + ': '\r\n                    + attribute.value + '</div>';\r\n            });\r\n        }\r\n    });\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * @typedef UpdatedOptionValue\r\n * @type Object\r\n * @property {string} id - Option value ID for look up\r\n * @property {string} url - Updated option value selection URL\r\n */\r\n\r\n/**\r\n * @typedef OptionSelectionResponse\r\n * @type Object\r\n * @property {string} priceHtml - Updated price HTML code\r\n * @property {Object} options - Updated Options\r\n * @property {string} options.id - Option ID\r\n * @property {UpdatedOptionValue[]} options.values - Option values\r\n */\r\n\r\n/**\r\n * Updates DOM using post-option selection Ajax response\r\n *\r\n * @param {OptionSelectionResponse} options - Ajax response options from selecting a product option\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n */\r\nfunction updateOptions(options, $productContainer) {\r\n    options.forEach(function (option) {\r\n        var $optionEl = $productContainer.find('.product-option[data-option-id*=\"' + option.id\r\n            + '\"]');\r\n        option.values.forEach(function (value) {\r\n            var valueEl = $optionEl.find('option[data-value-id*=\"' + value.id + '\"]');\r\n            valueEl.val(value.url);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Parses JSON from Ajax call made whenever an attribute value is [de]selected\r\n * @param {Object} response - response from Ajax call\r\n * @param {Object} response.product - Product object\r\n * @param {string} response.product.id - Product ID\r\n * @param {Object[]} response.product.variationAttributes - Product attributes\r\n * @param {Object[]} response.product.images - Product images\r\n * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required\r\n *     attributes have been selected.  Used partially to\r\n *     determine whether the Add to Cart button can be enabled\r\n * @param {jQuery} $productContainer - DOM element for a given product.\r\n */\r\nfunction handleVariantResponse(response, $productContainer) {\r\n    var isChoiceOfBonusProducts =\r\n        $productContainer.parents('.choose-bonus-product-dialog').length > 0;\r\n    var isVaraint;\r\n    if (response.product.variationAttributes) {\r\n        updateAttrs(response.product.variationAttributes, $productContainer);\r\n        isVaraint = response.product.productType === 'variant';\r\n        if (isChoiceOfBonusProducts && isVaraint) {\r\n            $productContainer.parent('.bonus-product-item')\r\n                .data('pid', response.product.id);\r\n\r\n            $productContainer.parent('.bonus-product-item')\r\n                .data('ready-to-order', response.product.readyToOrder);\r\n        }\r\n    }\r\n\r\n    // Update primary images\r\n    var primaryImageUrls = response.product.images;\r\n    primaryImageUrls.large.forEach(function (imageUrl, idx) {\r\n        $productContainer.find('.primary-images').find('img').eq(idx)\r\n            .attr('src', imageUrl.url);\r\n    });\r\n\r\n    // Update pricing\r\n    if (!isChoiceOfBonusProducts) {\r\n        var $priceSelector = $('.prices .price', $productContainer).length\r\n            ? $('.prices .price', $productContainer)\r\n            : $('.prices .price');\r\n        $priceSelector.replaceWith(response.product.price.html);\r\n    }\r\n\r\n    // Update promotions\r\n    $('.promotions').empty().html(getPromotionsHtml(response.product.promotions));\r\n\r\n    updateAvailability(response, $productContainer);\r\n\r\n    if (isChoiceOfBonusProducts) {\r\n        var $selectButton = $productContainer.find('.select-bonus-product');\r\n        $selectButton.trigger('bonusproduct:updateSelectButton', {\r\n            product: response.product, $productContainer: $productContainer\r\n        });\r\n    } else {\r\n        // Enable \"Add to Cart\" button if all required attributes have been selected\r\n        $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {\r\n            product: response.product, $productContainer: $productContainer\r\n        }).trigger('product:statusUpdate', response.product);\r\n    }\r\n\r\n    // Update attributes\r\n    $productContainer.find('.main-attributes').empty()\r\n        .html(getAttributesHtml(response.product.attributes));\r\n}\r\n\r\n/**\r\n * @typespec UpdatedQuantity\r\n * @type Object\r\n * @property {boolean} selected - Whether the quantity has been selected\r\n * @property {string} value - The number of products to purchase\r\n * @property {string} url - Compiled URL that specifies variation attributes, product ID, options,\r\n *     etc.\r\n */\r\n\r\n/**\r\n * Updates the quantity DOM elements post Ajax call\r\n * @param {UpdatedQuantity[]} quantities -\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n */\r\nfunction updateQuantities(quantities, $productContainer) {\r\n    if (!($productContainer.parent('.bonus-product-item').length > 0)) {\r\n        var optionsHtml = quantities.map(function (quantity) {\r\n            var selected = quantity.selected ? ' selected ' : '';\r\n            return '<option value=\"' + quantity.value + '\"  data-url=\"' + quantity.url + '\"' +\r\n                selected + '>' + quantity.value + '</option>';\r\n        }).join('');\r\n        getQuantitySelector($productContainer).empty().html(optionsHtml);\r\n    }\r\n}\r\n\r\n/**\r\n * updates the product view when a product attribute is selected or deselected or when\r\n *         changing quantity\r\n * @param {string} selectedValueUrl - the Url for the selected variation value\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n */\r\nfunction attributeSelect(selectedValueUrl, $productContainer) {\r\n    if (selectedValueUrl) {\r\n        $('body').trigger('product:beforeAttributeSelect',\r\n            { url: selectedValueUrl, container: $productContainer });\r\n\r\n        $.ajax({\r\n            url: selectedValueUrl,\r\n            method: 'GET',\r\n            success: function (data) {\r\n                handleVariantResponse(data, $productContainer);\r\n                updateOptions(data.product.options, $productContainer);\r\n                updateQuantities(data.product.quantities, $productContainer);\r\n                $('body').trigger('product:afterAttributeSelect',\r\n                    { data: data, container: $productContainer });\r\n                $.spinner().stop();\r\n            },\r\n            error: function () {\r\n                $.spinner().stop();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves url to use when adding a product to the cart\r\n *\r\n * @return {string} - The provided URL to use when adding a product to the cart\r\n */\r\nfunction getAddToCartUrl() {\r\n    return $('.add-to-cart-url').val();\r\n}\r\n\r\n/**\r\n * Parses the html for a modal window\r\n * @param {string} html - representing the body and footer of the modal window\r\n *\r\n * @return {Object} - Object with properties body and footer.\r\n */\r\nfunction parseHtml(html) {\r\n    var $html = $('<div>').append($.parseHTML(html));\r\n\r\n    var body = $html.find('.choice-of-bonus-product');\r\n    var footer = $html.find('.modal-footer').children();\r\n\r\n    return { body: body, footer: footer };\r\n}\r\n\r\n/**\r\n * Retrieves url to use when adding a product to the cart\r\n *\r\n * @param {Object} data - data object used to fill in dynamic portions of the html\r\n */\r\nfunction chooseBonusProducts(data) {\r\n    $('.modal-body').spinner().start();\r\n\r\n    if ($('#chooseBonusProductModal').length !== 0) {\r\n        $('#chooseBonusProductModal').remove();\r\n    }\r\n    var bonusUrl;\r\n    if (data.bonusChoiceRuleBased) {\r\n        bonusUrl = data.showProductsUrlRuleBased;\r\n    } else {\r\n        bonusUrl = data.showProductsUrlListBased;\r\n    }\r\n\r\n    var htmlString = '<!-- Modal -->'\r\n        + '<div class=\"modal fade\" id=\"chooseBonusProductModal\" role=\"dialog\">'\r\n        + '<div class=\"modal-dialog choose-bonus-product-dialog\" '\r\n        + 'data-total-qty=\"' + data.maxBonusItems + '\"'\r\n        + 'data-UUID=\"' + data.uuid + '\"'\r\n        + 'data-pliUUID=\"' + data.pliUUID + '\"'\r\n        + 'data-addToCartUrl=\"' + data.addToCartUrl + '\"'\r\n        + 'data-pageStart=\"0\"'\r\n        + 'data-pageSize=\"' + data.pageSize + '\"'\r\n        + 'data-moreURL=\"' + data.showProductsUrlRuleBased + '\"'\r\n        + 'data-bonusChoiceRuleBased=\"' + data.bonusChoiceRuleBased + '\">'\r\n        + '<!-- Modal content-->'\r\n        + '<div class=\"modal-content\">'\r\n        + '<div class=\"modal-header\">'\r\n        + '    <span class=\"\">' + data.labels.selectprods + '</span>'\r\n        + '    <button type=\"button\" class=\"close pull-right\" data-dismiss=\"modal\">&times;</button>'\r\n        + '</div>'\r\n        + '<div class=\"modal-body\"></div>'\r\n        + '<div class=\"modal-footer\"></div>'\r\n        + '</div>'\r\n        + '</div>'\r\n        + '</div>';\r\n    $('body').append(htmlString);\r\n    $('.modal-body').spinner().start();\r\n\r\n    $.ajax({\r\n        url: bonusUrl,\r\n        method: 'GET',\r\n        dataType: 'html',\r\n        success: function (html) {\r\n            var parsedHtml = parseHtml(html);\r\n            $('#chooseBonusProductModal .modal-body').empty();\r\n            $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);\r\n            $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);\r\n            $('#chooseBonusProductModal').modal('show');\r\n            $.spinner().stop();\r\n        },\r\n        error: function () {\r\n            $.spinner().stop();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the Mini-Cart quantity value after the customer has pressed the \"Add to Cart\" button\r\n * @param {string} response - ajax response from clicking the add to cart button\r\n */\r\nfunction handlePostCartAdd(response) {\r\n    $('.minicart').trigger('count:update', response);\r\n    var messageType = response.error ? 'alert-danger' : 'alert-success';\r\n    // show add to cart toast\r\n    if (response.newBonusDiscountLineItem\r\n        && Object.keys(response.newBonusDiscountLineItem).length !== 0) {\r\n        chooseBonusProducts(response.newBonusDiscountLineItem);\r\n    } else {\r\n        if ($('.add-to-cart-messages').length === 0) {\r\n            $('body').append(\r\n            '<div class=\"add-to-cart-messages\"></div>'\r\n            );\r\n        }\r\n\r\n        $('.add-to-cart-messages').append(\r\n            '<div class=\"alert ' + messageType + ' add-to-basket-alert text-center\" role=\"alert\">'\r\n            + response.message\r\n            + '</div>'\r\n        );\r\n\r\n        setTimeout(function () {\r\n            $('.add-to-basket-alert').remove();\r\n        }, 5000);\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves the bundle product item ID's for the Controller to replace bundle master product\r\n * items with their selected variants\r\n *\r\n * @return {string[]} - List of selected bundle product item ID's\r\n */\r\nfunction getChildProducts() {\r\n    var childProducts = [];\r\n    $('.bundle-item').each(function () {\r\n        childProducts.push({\r\n            pid: $(this).find('.product-id').text(),\r\n            quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)\r\n        });\r\n    });\r\n\r\n    return childProducts.length ? JSON.stringify(childProducts) : [];\r\n}\r\n\r\n/**\r\n * Retrieve product options\r\n *\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n * @return {string} - Product options and their selected values\r\n */\r\nfunction getOptions($productContainer) {\r\n    var options = $productContainer\r\n        .find('.product-option')\r\n        .map(function () {\r\n            var $elOption = $(this).find('.options-select');\r\n            var urlValue = $elOption.val();\r\n            var selectedValueId = $elOption.find('option[value=\"' + urlValue + '\"]')\r\n                .data('value-id');\r\n            return {\r\n                optionId: $(this).data('option-id'),\r\n                selectedValueId: selectedValueId\r\n            };\r\n        }).toArray();\r\n\r\n    return JSON.stringify(options);\r\n}\r\n\r\nmodule.exports = {\r\n    attributeSelect: attributeSelect,\r\n    methods: {\r\n        editBonusProducts: function (data) {\r\n            chooseBonusProducts(data);\r\n        }\r\n    },\r\n    colorAttribute: function () {\r\n        $(document).on('click', '[data-attr=\"color\"] a', function (e) {\r\n            e.preventDefault();\r\n\r\n            if ($(this).attr('disabled')) {\r\n                return;\r\n            }\r\n            var $productContainer = $(this).closest('.set-item');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.product-detail');\r\n            }\r\n\r\n            attributeSelect(e.currentTarget.href, $productContainer);\r\n        });\r\n    },\r\n\r\n    selectAttribute: function () {\r\n        $(document).on('change', 'select[class*=\"select-\"], .options-select', function (e) {\r\n            e.preventDefault();\r\n\r\n            var $productContainer = $(this).closest('.set-item');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.product-detail');\r\n            }\r\n            attributeSelect(e.currentTarget.value, $productContainer);\r\n        });\r\n    },\r\n\r\n    availability: function () {\r\n        $(document).on('change', '.quantity-select', function (e) {\r\n            e.preventDefault();\r\n\r\n            var $productContainer = $(this).closest('.product-detail');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.modal-content').find('.product-quickview');\r\n            }\r\n\r\n            if ($('.bundle-items', $productContainer).length === 0) {\r\n                attributeSelect($(e.currentTarget).find('option:selected').data('url'),\r\n                    $productContainer);\r\n            }\r\n        });\r\n    },\r\n\r\n    addToCart: function () {\r\n        $(document).on('click', 'button.add-to-cart, button.add-to-cart-global', function () {\r\n            var addToCartUrl;\r\n            var pid;\r\n            var pidsObj;\r\n            var setPids;\r\n\r\n            $('body').trigger('product:beforeAddToCart', this);\r\n\r\n            if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {\r\n                setPids = [];\r\n\r\n                $('.product-detail').each(function () {\r\n                    if (!$(this).hasClass('product-set-detail')) {\r\n                        setPids.push({\r\n                            pid: $(this).find('.product-id').text(),\r\n                            qty: $(this).find('.quantity-select').val(),\r\n                            options: getOptions($(this))\r\n                        });\r\n                    }\r\n                });\r\n                pidsObj = JSON.stringify(setPids);\r\n            }\r\n\r\n            pid = getPidValue($(this));\r\n\r\n            var $productContainer = $(this).closest('.product-detail');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');\r\n            }\r\n\r\n            addToCartUrl = getAddToCartUrl();\r\n\r\n            var form = {\r\n                pid: pid,\r\n                pidsObj: pidsObj,\r\n                childProducts: getChildProducts(),\r\n                quantity: getQuantitySelected($(this))\r\n            };\r\n\r\n            if (!$('.bundle-item').length) {\r\n                form.options = getOptions($productContainer);\r\n            }\r\n\r\n            $(this).trigger('updateAddToCartFormData', form);\r\n            if (addToCartUrl) {\r\n                $.ajax({\r\n                    url: addToCartUrl,\r\n                    method: 'POST',\r\n                    data: form,\r\n                    success: function (data) {\r\n                        handlePostCartAdd(data);\r\n                        $('body').trigger('product:afterAddToCart', data);\r\n                        $.spinner().stop();\r\n                    },\r\n                    error: function () {\r\n                        $.spinner().stop();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n    selectBonusProduct: function () {\r\n        $(document).on('click', '.select-bonus-product', function () {\r\n            var $choiceOfBonusProduct = $(this).parents('.choice-of-bonus-product');\r\n            var pid = $(this).data('pid');\r\n            var maxPids = $('.choose-bonus-product-dialog').data('total-qty');\r\n            var submittedQty = parseInt($(this).parents('.choice-of-bonus-product').find('.bonus-quantity-select').val(), 10);\r\n            var totalQty = 0;\r\n            $.each($('#chooseBonusProductModal .selected-bonus-products .selected-pid'), function () {\r\n                totalQty += $(this).data('qty');\r\n            });\r\n            totalQty += submittedQty;\r\n            var optionID = $(this).parents('.choice-of-bonus-product').find('.product-option').data('option-id');\r\n            var valueId = $(this).parents('.choice-of-bonus-product').find('.options-select option:selected').data('valueId');\r\n            if (totalQty <= maxPids) {\r\n                var selectedBonusProductHtml = ''\r\n                + '<div class=\"selected-pid row\" '\r\n                + 'data-pid=\"' + pid + '\"'\r\n                + 'data-qty=\"' + submittedQty + '\"'\r\n                + 'data-optionID=\"' + (optionID || '') + '\"'\r\n                + 'data-option-selected-value=\"' + (valueId || '') + '\"'\r\n                + '>'\r\n                + '<div class=\"col-sm-11 col-9 bonus-product-name\" >'\r\n                + $choiceOfBonusProduct.find('.product-name').html()\r\n                + '</div>'\r\n                + '<div class=\"col-1\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></div>'\r\n                + '</div>'\r\n                ;\r\n                $('#chooseBonusProductModal .selected-bonus-products').append(selectedBonusProductHtml);\r\n                $('.pre-cart-products').html(totalQty);\r\n                $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');\r\n            } else {\r\n                $('.selected-bonus-products .bonus-summary').addClass('alert-danger');\r\n            }\r\n        });\r\n    },\r\n    removeBonusProduct: function () {\r\n        $(document).on('click', '.selected-pid', function () {\r\n            $(this).remove();\r\n            var $selected = $('#chooseBonusProductModal .selected-bonus-products .selected-pid');\r\n            var count = 0;\r\n            if ($selected.length) {\r\n                $selected.each(function () {\r\n                    count += parseInt($(this).data('qty'), 10);\r\n                });\r\n            }\r\n\r\n            $('.pre-cart-products').html(count);\r\n            $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');\r\n        });\r\n    },\r\n    enableBonusProductSelection: function () {\r\n        $('body').on('bonusproduct:updateSelectButton', function (e, response) {\r\n            $('button.select-bonus-product', response.$productContainer).attr('disabled',\r\n                (!response.product.readyToOrder || !response.product.available));\r\n            var pid = response.product.id;\r\n            $('button.select-bonus-product').data('pid', pid);\r\n        });\r\n    },\r\n    showMoreBonusProducts: function () {\r\n        $(document).on('click', '.show-more-bonus-products', function () {\r\n            var url = $(this).data('url');\r\n            $('.modal-content').spinner().start();\r\n            $.ajax({\r\n                url: url,\r\n                method: 'GET',\r\n                success: function (html) {\r\n                    var parsedHtml = parseHtml(html);\r\n                    $('.modal-body').append(parsedHtml.body);\r\n                    $('.show-more-bonus-products:first').remove();\r\n                    $('.modal-content').spinner().stop();\r\n                },\r\n                error: function () {\r\n                    $('.modal-content').spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n    addBonusProductsToCart: function () {\r\n        $(document).on('click', '.add-bonus-products', function () {\r\n            var $readyToOrderBonusProducts = $('.choose-bonus-product-dialog .selected-pid');\r\n            var queryString = '?pids=';\r\n            var url = $('.choose-bonus-product-dialog').data('addtocarturl');\r\n            var pidsObject = {\r\n                bonusProducts: []\r\n            };\r\n\r\n            $.each($readyToOrderBonusProducts, function () {\r\n                var qtyOption =\r\n                    parseInt($(this)\r\n                        .data('qty'), 10);\r\n\r\n                var option = null;\r\n                if (qtyOption > 0) {\r\n                    if ($(this).data('optionid') && $(this).data('option-selected-value')) {\r\n                        option = {};\r\n                        option.optionId = $(this).data('optionid');\r\n                        option.productId = $(this).data('pid');\r\n                        option.selectedValueId = $(this).data('option-selected-value');\r\n                    }\r\n                    pidsObject.bonusProducts.push({\r\n                        pid: $(this).data('pid'),\r\n                        qty: qtyOption,\r\n                        options: [option]\r\n                    });\r\n                    pidsObject.totalQty = parseInt($('.pre-cart-products').html(), 10);\r\n                }\r\n            });\r\n            queryString += JSON.stringify(pidsObject);\r\n            queryString = queryString + '&uuid=' + $('.choose-bonus-product-dialog').data('uuid');\r\n            queryString = queryString + '&pliuuid=' + $('.choose-bonus-product-dialog').data('pliuuid');\r\n            $.spinner().start();\r\n            $.ajax({\r\n                url: url + queryString,\r\n                method: 'POST',\r\n                success: function (data) {\r\n                    $.spinner().stop();\r\n                    if (data.error) {\r\n                        $('.error-choice-of-bonus-products')\r\n                        .html(data.errorMessage);\r\n                    } else {\r\n                        $('.configure-bonus-product-attributes').html(data);\r\n                        $('.bonus-products-step2').removeClass('hidden-xl-down');\r\n                        $('#chooseBonusProductModal').modal('hide');\r\n\r\n                        if ($('.add-to-cart-messages').length === 0) {\r\n                            $('body').append(\r\n                            '<div class=\"add-to-cart-messages\"></div>'\r\n                         );\r\n                        }\r\n                        $('.minicart-quantity').html(data.totalQty);\r\n                        $('.add-to-cart-messages').append(\r\n                            '<div class=\"alert alert-success add-to-basket-alert text-center\"'\r\n                            + ' role=\"alert\">'\r\n                            + data.msgSuccess + '</div>'\r\n                        );\r\n                        setTimeout(function () {\r\n                            $('.add-to-basket-alert').remove();\r\n                            if ($('.cart-page').length) {\r\n                                location.reload();\r\n                            }\r\n                        }, 3000);\r\n                    }\r\n                },\r\n                error: function () {\r\n                    $.spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    getPidValue: getPidValue,\r\n    getQuantitySelected: getQuantitySelected\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js?");

/***/ })

/******/ });